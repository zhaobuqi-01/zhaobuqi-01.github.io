<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git入门</title>
    <url>/2020/09/26/Git%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Git的下载与安装"><a href="#Git的下载与安装" class="headerlink" title="Git的下载与安装"></a>Git的下载与安装</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p><code>sudo apt-get install git</code></p>
<p><img src="https://i.loli.net/2020/09/26/xOepViyLMdUDm5o.png" alt="image.png"> </p>
<h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git下载地址</a></p>
<p>根据自己电脑选择合适的版本</p>
<h3 id="组件的选择"><a href="#组件的选择" class="headerlink" title="组件的选择"></a>组件的选择</h3><p>选择自己需要组件，由于所有必需的组件都已经默认勾选，可以直接进入下一步。</p>
<h3 id="环境变量的设置"><a href="#环境变量的设置" class="headerlink" title="环境变量的设置"></a>环境变量的设置</h3><p>在安装选项选择添加到Path中</p>
<h1 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h1><h1 id="设置姓名与邮箱地址"><a href="#设置姓名与邮箱地址" class="headerlink" title="设置姓名与邮箱地址"></a>设置姓名与邮箱地址</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;name&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/09/26/uzldxYp6Vj3gGiq.png" alt="image.png"> </p>
<p>会在“~./gitconfig”中输出以下信息</p>
<p><img src="https://i.loli.net/2020/09/26/nKVxs5lJmYD1p79.png" alt="image.png"> </p>
<h1 id="使用前的准备"><a href="#使用前的准备" class="headerlink" title="使用前的准备"></a>使用前的准备</h1><h2 id="创建GitHub账号"><a href="#创建GitHub账号" class="headerlink" title="创建GitHub账号"></a>创建GitHub账号</h2><p><a href="https://github.com/" target="_blank" rel="noopener">github地址</a> </p>
<p><img src="https://i.loli.net/2020/09/26/Mw32Ok69WpfmogS.png" alt="image.png"> </p>
<h2 id="设置SSH-Key"><a href="#设置SSH-Key" class="headerlink" title="设置SSH Key"></a>设置SSH Key</h2><p><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code> </p>
<p><img src="https://i.loli.net/2020/09/26/xTDW84mnobksra7.png" alt="image.png"> </p>
<h2 id="添加公开密钥"><a href="#添加公开密钥" class="headerlink" title="添加公开密钥"></a>添加公开密钥</h2><p><img src="https://i.loli.net/2020/09/26/V9mBXrUSl4s6fM3.png" alt="image.png"> </p>
<p>ssh在<code>~/.ssh/</code>中</p>
<p><img src="https://i.loli.net/2020/09/26/YVCMeiaJ1UcAQd3.png" alt="image.png"></p>
<p><img src="https://i.loli.net/2020/09/26/G5K4p7ekisq8SEh.png" alt="image.png"> </p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p><img src="https://i.loli.net/2020/09/26/onWGjAUSRmheBai.png" alt="image.png"> </p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="git-init-初始化仓库"><a href="#git-init-初始化仓库" class="headerlink" title="git init 初始化仓库"></a>git init 初始化仓库</h2><p><img src="https://i.loli.net/2020/09/26/M4OyI2Ar9QmRs5G.png" alt="image.png"> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~$ cd  git_study&#x2F;</span><br><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git init</span><br><span class="line">已初始化空的 Git 仓库于 &#x2F;home&#x2F;zhaobuqi&#x2F;git_study&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="git-status-查看仓库状态"><a href="#git-status-查看仓库状态" class="headerlink" title="git status 查看仓库状态"></a>git status 查看仓库状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git status </span><br><span class="line">位于分支 master</span><br><span class="line"></span><br><span class="line">尚无提交</span><br><span class="line"></span><br><span class="line">无文件要提交（创建&#x2F;拷贝文件并使用 &quot;git add&quot; 建立跟踪）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ touch readme.md</span><br><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git status </span><br><span class="line">位于分支 master</span><br><span class="line"></span><br><span class="line">尚无提交</span><br><span class="line"></span><br><span class="line">未跟踪的文件:</span><br><span class="line">  （使用 &quot;git add &lt;文件&gt;...&quot; 以包含要提交的内容）</span><br><span class="line">	readme.md</span><br><span class="line"></span><br><span class="line">提交为空，但是存在尚未跟踪的文件（使用 &quot;git add&quot; 建立跟踪）</span><br></pre></td></tr></table></figure>



<h2 id="git-add-向暂存区添加文件"><a href="#git-add-向暂存区添加文件" class="headerlink" title="git add 向暂存区添加文件"></a>git add 向暂存区添加文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git add readme.md</span><br><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git status </span><br><span class="line">位于分支 master</span><br><span class="line"></span><br><span class="line">尚无提交</span><br><span class="line"></span><br><span class="line">要提交的变更：</span><br><span class="line">  （使用 &quot;git rm --cached &lt;文件&gt;...&quot; 以取消暂存）</span><br><span class="line">	新文件：   readme.md</span><br></pre></td></tr></table></figure>

<h2 id="git-commit-保存仓库的历史记录"><a href="#git-commit-保存仓库的历史记录" class="headerlink" title="git commit 保存仓库的历史记录"></a>git commit 保存仓库的历史记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git commit readme.md </span><br><span class="line">[master （根提交） 53ff5c9] first commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 readme.md</span><br><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git status </span><br><span class="line">位于分支 master</span><br><span class="line">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure>

<p><code>git commit .</code> 提交全部文件</p>
<h2 id="git-log-查看提交日志"><a href="#git-log-查看提交日志" class="headerlink" title="git log 查看提交日志"></a>git log 查看提交日志</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git log </span><br><span class="line">commit 53ff5c9fabd62b3d81371efe28b2538a72c31cdb (HEAD -&gt; master)</span><br><span class="line">Author: zhaobuqi &lt;1138883954@qq.com&gt;</span><br><span class="line">Date:   Sat Sep 26 16:18:17 2020 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br></pre></td></tr></table></figure>

<h2 id="git-diff-查看更改前后的差别"><a href="#git-diff-查看更改前后的差别" class="headerlink" title="git diff 查看更改前后的差别"></a>git diff 查看更改前后的差别</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git diff</span><br><span class="line">diff --git a&#x2F;readme.md b&#x2F;readme.md</span><br><span class="line">index e69de29..f86f2b5 100644</span><br><span class="line">--- a&#x2F;readme.md</span><br><span class="line">+++ b&#x2F;readme.md</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+git教程</span><br><span class="line"></span><br><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git diff HEAD</span><br><span class="line">diff --git a&#x2F;readme.md b&#x2F;readme.md</span><br><span class="line">index e69de29..f86f2b5 100644</span><br><span class="line">--- a&#x2F;readme.md</span><br><span class="line">+++ b&#x2F;readme.md</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+git教程</span><br><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git commit readme.md </span><br><span class="line">[master 1f79ce9] 2 commit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><h2 id="git-branch-显示全部分支"><a href="#git-branch-显示全部分支" class="headerlink" title="git branch 显示全部分支"></a>git branch 显示全部分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git branch </span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<h2 id="git-checkout-b-创建，切换分支"><a href="#git-checkout-b-创建，切换分支" class="headerlink" title="git checkout -b 创建，切换分支"></a>git checkout -b 创建，切换分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git checkout -b git_study1</span><br><span class="line">切换到一个新分支 &#39;git_study1&#39;</span><br><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git branch </span><br><span class="line">* git_study1</span><br><span class="line">  master</span><br></pre></td></tr></table></figure>

<h2 id="git-merge-合并分支"><a href="#git-merge-合并分支" class="headerlink" title="git merge 合并分支"></a>git merge 合并分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git checkout master </span><br><span class="line">切换到分支 &#39;master&#39;</span><br><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git merge --no-ff git_study1 </span><br><span class="line">Merge made by the &#39;recursive&#39; strategy.</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure>

<h2 id="git-log-–graph-以图表形式查看分支"><a href="#git-log-–graph-以图表形式查看分支" class="headerlink" title="git log –graph 以图表形式查看分支"></a>git log –graph 以图表形式查看分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git log --graph </span><br><span class="line">*   commit 4d25e84f96d67cdc13f3c4e6896f430c2de1a9df (HEAD -&gt; master)</span><br><span class="line">|\  Merge: 1f79ce9 a9bfccb</span><br><span class="line">| | Author: zhaobuqi &lt;1138883954@qq.com&gt;</span><br><span class="line">| | Date:   Sat Sep 26 16:40:49 2020 +0800</span><br><span class="line">| | </span><br><span class="line">| |     Merge branch &#39;git_study1&#39;</span><br><span class="line">| | </span><br><span class="line">| * commit a9bfccb265010fd2b1f55c70877d77f382fb847c (git_study1)</span><br><span class="line">|&#x2F;  Author: zhaobuqi &lt;1138883954@qq.com&gt;</span><br><span class="line">|   Date:   Sat Sep 26 16:39:59 2020 +0800</span><br><span class="line">|   </span><br><span class="line">|       git_study commit</span><br><span class="line">| </span><br><span class="line">* commit 1f79ce90c8eeb18514b15ed5af1828d4e6e5fa10</span><br><span class="line">| Author: zhaobuqi &lt;1138883954@qq.com&gt;</span><br><span class="line">| Date:   Sat Sep 26 16:32:09 2020 +0800</span><br><span class="line">| </span><br><span class="line">|     2 commit</span><br><span class="line">| </span><br><span class="line">* commit 53ff5c9fabd62b3d81371efe28b2538a72c31cdb</span><br><span class="line">  Author: zhaobuqi &lt;1138883954@qq.com&gt;</span><br><span class="line">  Date:   Sat Sep 26 16:18:17 2020 +0800</span><br><span class="line">  </span><br><span class="line">      first commit</span><br></pre></td></tr></table></figure>

<h1 id="更改提交"><a href="#更改提交" class="headerlink" title="更改提交"></a>更改提交</h1><h2 id="git-reset-回溯历史版本"><a href="#git-reset-回溯历史版本" class="headerlink" title="git reset   回溯历史版本"></a>git reset   回溯历史版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git reset --hard 1f79ce90c8eeb18514b15ed5af1828d4e6e5fa10</span><br><span class="line">HEAD 现在位于 1f79ce9 2 commit</span><br></pre></td></tr></table></figure>

<h1 id="推送远程仓库"><a href="#推送远程仓库" class="headerlink" title="推送远程仓库"></a>推送远程仓库</h1><h2 id="git-remote-add-添加远程仓库"><a href="#git-remote-add-添加远程仓库" class="headerlink" title="git  remote add 添加远程仓库"></a>git  remote add 添加远程仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git remote add origin git@github.com:zhaobuqi-01&#x2F;test.git</span><br></pre></td></tr></table></figure>

<h2 id="git-push-推送到远程仓库"><a href="#git-push-推送到远程仓库" class="headerlink" title="git push 推送到远程仓库"></a>git push 推送到远程仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;git_study$ git push -u origin  master</span><br></pre></td></tr></table></figure>

<h2 id="git-clone-获取远程仓库"><a href="#git-clone-获取远程仓库" class="headerlink" title="git clone 获取远程仓库"></a>git clone 获取远程仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~&#x2F;test$ git clone git@github.com:zhaobuqi-01&#x2F;zhaobuqi-01.github.io</span><br></pre></td></tr></table></figure>

<h2 id="git-pull-获得最新的远程仓库分支"><a href="#git-pull-获得最新的远程仓库分支" class="headerlink" title="git pull 获得最新的远程仓库分支"></a>git pull 获得最新的远程仓库分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git  pull origin master</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Go变量</title>
    <url>/2020/09/15/Go%E5%8F%98%E9%87%8F-1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Go命名</title>
    <url>/2020/09/15/Go%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<h1 id="2-1命名"><a href="#2-1命名" class="headerlink" title="2.1命名"></a>2.1命名</h1><p><strong>命名规则：</strong></p>
<p>一个名字必须以一个字母（Unicode字母）或下划线开头，后面可以跟任意数量的字母、数字或下划线。</p>
<p><strong>注意事项：</strong> </p>
<ol>
<li><p>大写字母和小写字母是不同的：heapSort和Heapsort是两个不同的名字</p>
</li>
<li><p>关键字不能用于自定义名字，只能在特定语法结构中使用。</p>
</li>
</ol>
<p><strong>关键字</strong> </p>
<blockquote>
<p>break        default         func         interface         select<br>case          defer             go              map                struct<br>chan         else                 goto         package         switch<br>const         fallthrough     if             range             type<br>continue     for                 import     return          var</p>
</blockquote>
<p><strong>预定义的名字</strong> ，主要对应内建的常量，类型和函数</p>
<p>这些预定义的名字并不是关键字，你可以在定义中重新使用它们。在一些特殊的场景中重新定义它们也是有意义的，但是也要注意避免过度而引起语义混乱。</p>
<blockquote>
<p>内建常量:     true     false     iota     nil<br>内建类型: int     int8     int16     int32     int64<br>               uint     uint8 uint16     uint32 uint64     uintptr<br>               float32     float64     complex128     complex64<br>               bool     byte     rune     string     error<br>内建函数:     make     len     cap     new     append     copy     close     delete<br>                   complex     real     imag<br>                   panic     recover</p>
</blockquote>
<ol start="3">
<li><p>如果它的就一个名字在函数内部定义，那么它的就只在函数内部有效。如果在函数外部定义，那么将在当前包的所有文件中都可以访问。</p>
</li>
<li><p><strong>名字的开头字母的大小写决定了名字在包外的可见性。包本身的名字一般总是用消息字母</strong> 如果一个名字是大写字母开头的(注：必须是在函数外部定义的包级名字；包级函数名本身也是包级名字)，那么他将是导出的，也就是可以被外部的包访问，<strong>例如 fmt 包的Printf就是导出的，可以在fmt包外部访问</strong> </p>
</li>
<li><p><strong>名字的长度没有逻辑限制</strong> ，但是Go语言的风格是尽量使用短小的名字，对于局部变量尤其是<br>这样；你会经常看到i之类的短名字，而不是冗长的theLoopIndex命名。通常来说，如果一个<br>名字的作用域比较大，生命周期也比较长，那么用长的名字将会更有意义。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>Go变量</title>
    <url>/2020/09/14/Go%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>461.汉明距离</title>
    <url>/2020/09/29/461-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</url>
    <content><![CDATA[<h4 id="461-汉明距离"><a href="#461-汉明距离" class="headerlink" title="461. 汉明距离"></a>461. 汉明距离</h4><p>难度简单332</p>
<p>两个整数之间的<strong>汉明距离</strong>指的是这两个数字对应二进制位不同的位置的数目。</p>
<p>给出两个整数 <code>x</code> 和 <code>y</code>，计算它们之间的汉明距离。</p>
<p><strong>注意：</strong><br>0 ≤ <code>x</code>, <code>y</code> &lt; 231.</p>
<p><strong>示例:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: x &#x3D; 1, y &#x3D; 4</span><br><span class="line"></span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">1   (0 0 0 1)</span><br><span class="line">4   (0 1 0 0)</span><br><span class="line">       ↑   ↑</span><br><span class="line"></span><br><span class="line">上面的箭头指出了对应二进制位不同的位置。</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = x ^ y;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            i = i &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>程序流程控制</title>
    <url>/2020/10/08/Go-%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><p>程序从上到下逐次地执行，中间没有任何判断与跳转。</p>
<h1 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h1><p>分支控制就是让程序有选择的执行</p>
<h2 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">if</span> 条件表达式&#123;</span><br><span class="line">    执行代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">#示例</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line">    fmt.Scanln(&amp;age)</span><br><span class="line">    <span class="keyword">if</span> age&gt;<span class="number">18</span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">"你年龄大了，要对自己负责"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/10/05/GKxXaRDOu7jncHV.png" alt="image.png"> </p>
<h2 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">if</span> 条件表达式&#123;</span><br><span class="line">    执行代码块<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    执行代码块<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/10/05/DsKeyX4QdOlVnvJ.png" alt="image.png"> </p>
<h2 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">if</span> 条件表达式<span class="number">1</span>&#123;</span><br><span class="line">    执行代码块<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> 条件表达式<span class="number">2</span>&#123;</span><br><span class="line">    执行代码块<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    执行代码块n</span><br><span class="line">&#125;</span><br><span class="line">#<span class="keyword">else</span> 可有可无</span><br><span class="line">#多分支只能有一个执行入口或者一个执行入口都没有【没有<span class="keyword">else</span>】</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<h2 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">if</span> 条件表达式&#123;</span><br><span class="line">    <span class="keyword">if</span> 条件表达式&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">#控制在<span class="number">3</span>层以内</span><br></pre></td></tr></table></figure>

<h2 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line">#<span class="keyword">switch</span>用与基于不同条件执行不同的代码</span><br><span class="line">#<span class="keyword">switch</span>匹配项后面不需要再加<span class="keyword">break</span></span><br><span class="line"><span class="keyword">switch</span> 表达式<span class="number">1</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> 表达式<span class="number">1</span>,表达式<span class="number">2</span>,...:</span><br><span class="line">    	语句块<span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> 表达式<span class="number">3</span>,表达式<span class="number">4</span>,...:</span><br><span class="line">    	语句块<span class="number">2</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    	语句块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>switch细节</strong> </p>
<ul>
<li>switch的条件表达式可以是<strong>常量，变量，有返回值的函数等都可以</strong> </li>
<li>case与switch的数据类型要保持一致</li>
<li>case后面可以跟多个表达式，使用逗号进行分隔</li>
<li>case后面的表达式如果是常量（字面量），则要求不能重复</li>
<li>case不需要带break</li>
<li>default不是必需的</li>
<li>switch后面可以不用带表达式，类似<strong>if  elsse</strong> 的使用</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>&#123; </span><br><span class="line">    <span class="keyword">case</span> age ==<span class="number">10</span> :</span><br><span class="line">    	fmt.Println(<span class="string">"age==10"</span>)</span><br><span class="line">    <span class="keyword">case</span> age ==<span class="number">20</span> :</span><br><span class="line">    	fmt.Println(<span class="string">"age==20"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    	fmt.Println(<span class="string">"没有匹配到"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>switch后也可以直接定义一个变量并用分号隔开</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> age:=<span class="number">10</span>; &#123; </span><br><span class="line">    <span class="keyword">case</span> age ==<span class="number">10</span> :</span><br><span class="line">    	fmt.Println(<span class="string">"age==10"</span>)</span><br><span class="line">    <span class="keyword">case</span> age ==<span class="number">20</span> :</span><br><span class="line">    	fmt.Println(<span class="string">"age==20"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    	fmt.Println(<span class="string">"没有匹配到"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>switch的穿透<strong>fallthrough</strong> </li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> age:=<span class="number">10</span>; &#123; </span><br><span class="line">    <span class="keyword">case</span> age ==<span class="number">10</span> :</span><br><span class="line">    	fmt.Println(<span class="string">"age==10"</span>)</span><br><span class="line">    	<span class="keyword">fallthrough</span>#穿透</span><br><span class="line">    <span class="keyword">case</span> age ==<span class="number">20</span> :</span><br><span class="line">    	fmt.Println(<span class="string">"age==20"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    	fmt.Println(<span class="string">"没有匹配到"</span>)</span><br><span class="line">&#125;</span><br><span class="line">#输出</span><br><span class="line">#age==<span class="number">10</span> age==<span class="number">20</span></span><br><span class="line">#默认穿透一层</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<ul>
<li>Type Switch :switch语句还可以与type-switch来判断某个interface变量中实际指向的变量类型</li>
</ul>
<h2 id="switch与if-else-的区别"><a href="#switch与if-else-的区别" class="headerlink" title="switch与if else 的区别"></a>switch与if else 的区别</h2><ol>
<li>如果判断的具体的数值不多，而且符合整数，浮点数，字符，字符串，使用switch</li>
<li>对于区间判断和结果为布尔值的情况使用*<em>if else *</em> </li>
</ol>
<h1 id="for-循环控制"><a href="#for-循环控制" class="headerlink" title="for 循环控制"></a>for 循环控制</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">#语法 </span><br><span class="line"><span class="comment">/**************1.********************/</span></span><br><span class="line"><span class="keyword">for</span> 循环变量的初始化;循环条件;循环变量迭代&#123;</span><br><span class="line">    循环操作(语句)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************2.********************/</span></span><br><span class="line">j:=<span class="number">1</span><span class="comment">//循环变量初始化</span></span><br><span class="line"><span class="keyword">for</span> 循环判断条件&#123;</span><br><span class="line">    循环体</span><br><span class="line">    j++<span class="comment">//循环变量迭代</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************3.********************/</span></span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;#死循环，需要配合<span class="keyword">break</span>语句使用</span><br><span class="line"><span class="comment">/*********************************/</span></span><br><span class="line">#循环四要素</span><br><span class="line">#<span class="number">1.</span>循环变量初始化</span><br><span class="line">#<span class="number">2.</span>循环条件</span><br><span class="line">#<span class="number">3.</span>循环操作(语句)，循环体</span><br><span class="line">#<span class="number">4.</span>循环变量迭代</span><br></pre></td></tr></table></figure>

<p><strong>for循环执行的顺序说明</strong> </p>
<ol>
<li>执行循环变量初始化</li>
<li>执行循环条件</li>
<li>如果条件为真，则执行循环体</li>
<li>执行循环变量迭代</li>
<li>继续执行2，3，4，直到循环条件为假(false)，退出for循环</li>
</ol>
<p><strong>for循环的细节与注意事项</strong> </p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for-range遍历字符串，数组</span></span><br><span class="line"><span class="comment">/***************传统方法********************/</span></span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"hello,world!"</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(str);i++;&#123;</span><br><span class="line">    fmt.printf(<span class="string">"%c\n"</span>,str[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当出现汉字是会出现乱码，汉字在utf-8里占3个字节，而读取则是一个字节</span></span><br><span class="line"><span class="comment">/****************4.for-range*****************/</span></span><br><span class="line">str = <span class="string">"hello,world!"</span></span><br><span class="line"><span class="keyword">for</span> index,val := <span class="keyword">range</span> str &#123;</span><br><span class="line">    fmt.printf(<span class="string">"index=%d,val=%c\n"</span>,index,val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当存在汉字时，不会出现乱码</span></span><br><span class="line"><span class="comment">//for-range遍历使用的是字符的方式遍历</span></span><br></pre></td></tr></table></figure>



<h2 id="while与do-while的实现"><a href="#while与do-while的实现" class="headerlink" title="while与do while的实现"></a>while与do while的实现</h2><p><strong>Golang里没有while和do while语法</strong> </p>
<p><strong>while循环的实现</strong> </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">循环变量初始化</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> 循环条件表达式&#123;</span><br><span class="line">        <span class="keyword">break</span><span class="comment">//跳出for循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    循环体</span><br><span class="line">    循环变量迭代</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>do while 循环的实现</strong> </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">循环变量初始化</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">    循环体</span><br><span class="line">    循环变量迭代</span><br><span class="line">    <span class="keyword">if</span> 循环条件表达式&#123;</span><br><span class="line">        <span class="keyword">break</span> <span class="comment">//跳出for循环【结束for循环】</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//至少执行一次</span></span><br></pre></td></tr></table></figure>

<h1 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h1><h2 id="break跳转语句"><a href="#break跳转语句" class="headerlink" title="break跳转语句"></a>break跳转语句</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="comment">//break语句用于终止某个语句块的执行，用于中断当前for循环或跳出switch语句。</span></span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>break默认跳出最近的for循环</li>
<li>break后面可以指定标签，跳出标签对应的for循环【可以配合标签使用】</li>
</ol>
<h2 id="continue跳转语句"><a href="#continue跳转语句" class="headerlink" title="continue跳转语句"></a>continue跳转语句</h2><ol>
<li>continue语句用于结束本次循环，继续执行下一次循环。</li>
<li>continue可以使用标签跳出</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="goto跳转语句"><a href="#goto跳转语句" class="headerlink" title="goto跳转语句"></a>goto跳转语句</h2><p>跳转到标签所在代码处，不再执行goto后面的代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">goto</span> label</span><br><span class="line">......</span><br><span class="line">label:statement</span><br></pre></td></tr></table></figure>

<h2 id="return跳转语句"><a href="#return跳转语句" class="headerlink" title="return跳转语句"></a>return跳转语句</h2><p>跳出所在的方法或者函数</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>Go声明</title>
    <url>/2020/09/15/Go%E5%A3%B0%E6%98%8E/</url>
    <content><![CDATA[<h1 id="2-2声明"><a href="#2-2声明" class="headerlink" title="2.2声明"></a>2.2声明</h1><p>  <strong>声明语句定义了程序的各种实体对象以及部分或全部的属性</strong> </p>
<p>Go语言主要有四种类型的声明语句：<strong>var</strong> ，<strong>const</strong> ，<strong>type</strong> 和<strong>func</strong> ，分别对应变量，常量，类型和函数实体对象的声明。</p>
<p>一个Go语言编写的程序对应一个或多个以.go为文件后缀名的源文件中。每个源文件以包的声<br>明语句开始，说明该源文件是属于哪个包。包声明语句之后是import语句导入依赖的其它包，<br>然后是包一级的类型、变量、常量、函数的声明语句，包一级的各种类型的声明语句的顺序<br>无关紧要（译注：函数内部的名字则必须先声明之后才能使用）。</p>
<p><strong>一个函数的声明由一个函数名字、参数列表（由函数的调用者提供参数变量的具体值）、一<br>个可选的返回值列表和包含函数定义的函数体组成。</strong> 如果函数没有返回值，那么返回值列表<br>是省略的。执行函数从函数的第一个语句开始，依次顺序执行直到遇到return返回语句，如果<br>没有返回语句则是执行到函数末尾，然后返回到函数调用者。</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>字符串类型</title>
    <url>/2020/09/20/Go%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="字符串的基本使用"><a href="#字符串的基本使用" class="headerlink" title="字符串的基本使用"></a>字符串的基本使用</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> address <span class="keyword">string</span> = <span class="string">"中国"</span></span><br><span class="line">	fmt.Println(address)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>go语言使用UTF-8编码</li>
<li>go语言中的字符串是不可变，字符串一旦被赋值就无法修改</li>
<li>字符串的两种表现方式</li>
</ol>
<ul>
<li>双引号【””】，会识别转义字符</li>
<li>反引号【``】，可以以字符串的原生形式输出</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> address <span class="keyword">string</span> = <span class="string">"中国"</span></span><br><span class="line">	fmt.Println(address)</span><br><span class="line">	str2 := <span class="string">`nihao \n\r djskjsdvh</span></span><br><span class="line"><span class="string">	dvsjdvlsdv</span></span><br><span class="line"><span class="string">	dvksv`</span></span><br><span class="line">	fmt.Println(str2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>字符串的拼接方式</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> str = <span class="string">"hello"</span> + <span class="string">"world"</span> </span><br><span class="line">	str += <span class="string">"世界"</span></span><br><span class="line">	fmt.Println(str)</span><br><span class="line">    <span class="comment">//当一个拼接很长的时候，可以分行写，但加号需要在保留上一行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>Go语法规范</title>
    <url>/2020/09/15/Go%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>必须告诉编译器源文件需要哪些包。</li>
<li>必须恰当导入需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。</li>
<li><code>import</code> 声明必须跟在文件的<code>package</code> 声明之后。随后，则是组成程序的函数，变量，常量，类型的声明语句（分别由<code>func</code>,<code>var</code>,<code>const</code>,<code>type</code>定义）。这些内容的声明顺序并不重要。</li>
<li>Go语言不需要在语句或声明的末尾添加分号。</li>
<li>函数的左括号 <code>{</code> 必须和 <code>func</code>  函数声明在同一行上,且位于末尾，不能独占一行。</li>
</ul>
<h1 id="Go的注释"><a href="#Go的注释" class="headerlink" title="Go的注释"></a>Go的注释</h1><p><strong>行注释：</strong> // 【Go语言规范尽量使用行注释而不是块注释】</p>
<p><strong>块注释:</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注释内容*/</span></span><br><span class="line">在<span class="comment">/* */</span>不能再添加<span class="comment">/**/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>Go指针</title>
    <url>/2020/09/22/Go%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="与指针相关的运算符"><a href="#与指针相关的运算符" class="headerlink" title="与指针相关的运算符"></a>与指针相关的运算符</h1><blockquote>
<p>地址运算符：&amp;</p>
<p>一般注解：</p>
<p>后跟一个变量名时，&amp;给出该变量的地址</p>
<p>示例：</p>
<p>&amp;nurse表示变量nurse的地址</p>
<p>地址运算符：*</p>
<p>一般注释：</p>
<p>后跟一个指针或地址时，*给出存储在指针指向地址上的值</p>
<p>示例：</p>
<p>nurse = 22</p>
<p>ptr = &amp;nurse</p>
<p>val = *ptr</p>
<p>执行以上3条语句的 最终结果是把22赋给val</p>
</blockquote>
<p><img src="https://i.loli.net/2020/09/24/XaPpvLAWZIEMsxi.png" alt="image.png"></p>
<h1 id="变量：名称，地址和值"><a href="#变量：名称，地址和值" class="headerlink" title="变量：名称，地址和值"></a>变量：名称，地址和值</h1>]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>Python--循环结构</title>
    <url>/2020/09/28/Python-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><p><strong>1.while语句的一般形式:</strong> </p>
<p>while 条件表达式:</p>
<p>​    循环体</p>
<blockquote>
<p><strong>注意事项</strong> </p>
<ol>
<li>当循环体由多条语句构成时，必须用缩进对齐的方式组成一个语句块来分隔子句，否则会产生错误。</li>
<li>与if语句的语法类似，如果while循环体中中一条语句，可以将该语句与while写在同一行中。</li>
<li>while语句的条件表达式不需要用括号括起来，表达式后面必须有冒号。</li>
<li>如果表达式永远为真，循环将会无限的执行下去。在循环体内必须有修改表达式值的语句，使其值趋向Flase,让循环趋于结束，避免死循环。</li>
</ol>
</blockquote>
<p><strong>2.在while语句中使用else</strong></p>
<p>while 条件表达式:</p>
<p>​    循环体</p>
<p>else :</p>
<p>​    语句</p>
<p>else中语句会在循环正常执行完的情况下执行（不管是否执行循环体 ）。</p>
<h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><p>for语句的一般格式:</p>
<p>for 目标变量 in 序列对象 :</p>
<p>​    循环体</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>入门</title>
    <url>/2020/09/08/go%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//main 包比较特殊。它定义了一个独立可执行的程序，而不是一个库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//一个函数的声明由 func 关键字、函数名、参数列表、返回值列表以及包含在大括号里的函数体组成</span></span><br><span class="line">    fmt.Println(<span class="string">"hello,世界"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>go run test.go</code></p>
<p>Hello,world.你好，世界！</p>
</blockquote>
<p>Go语言的代码通过包（package）组织，包类似于其他语言里的库（libraies）或者模块（modules）.</p>
<p>一个包位于单个目录下的一个或多个.go源代码文件组成，目录定义报的作用。</p>
<p><strong>每个源代码都以一条<code>package</code> 声明语句开始</strong> ，这个例子里就是<code>package main</code> ,<strong>表示该文件属于哪个包</strong> ，紧跟着一系列导入（import)的包，之后是存储在这个文件里的程序语句。</p>
<p><strong><em>必须告诉编译器源文件需要哪些包，这就是跟随在<code>package</code> 声明后面的<code>import</code> 声明扮演的角色。</em></strong> </p>
<p><em>必须恰当需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。</em></p>
<p><strong><code>import</code> 声明必须跟在文件的<code>package</code> 声明之后。</strong>随后，则是组成程序的函数，变量，常量，类型的声明语句。这些内容的声明顺序并不重要。</p>
<p><strong>Go语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句</strong> </p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>dos的常用命令介绍</title>
    <url>/2020/09/12/dos%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="dos的常用命令介绍"><a href="#dos的常用命令介绍" class="headerlink" title="dos的常用命令介绍"></a>dos的常用命令介绍</h2><ol>
<li>查看当前目录是什么 </li>
</ol>
<p><strong>dir</strong> </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">demo</span>&gt;<span class="title">dir</span></span></span><br><span class="line"><span class="function"> 驱动器 <span class="title">D</span> 中的卷是 <span class="title">Data</span></span></span><br><span class="line"><span class="function"> 卷的序列号是 543<span class="title">D</span>-<span class="title">EB9C</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">D</span>:\<span class="title">demo</span> 的目录</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020/09/12  19:35    &lt;<span class="title">DIR</span>&gt;          .</span></span><br><span class="line"><span class="function">2020/09/12  19:35    &lt;<span class="title">DIR</span>&gt;          ..</span></span><br><span class="line"><span class="function">2020/09/12  19:35         2,141,184 <span class="title">myhello.exe</span></span></span><br><span class="line"><span class="function">2020/09/11  20:11         2,141,184 <span class="title">test.exe</span></span></span><br><span class="line"><span class="function">2020/09/11  20:09                91 <span class="title">test.go</span></span></span><br><span class="line"><span class="function">               3 个文件      4,282,459 字节</span></span><br><span class="line"><span class="function">               2 个目录 392,539,840,512 可用字节</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>切换到其他盘符</li>
</ol>
<p><strong>cd /d f:</strong> </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">demo</span>&gt;<span class="title">cd</span> /<span class="title">d</span> <span class="title">e</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">E</span>:\&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>切换目录</li>
</ol>
<p><strong>cd d:\demo</strong> </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">E:\&gt;<span class="title">cd</span> <span class="title">e</span>:\<span class="title">Doweload</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">e</span>:\<span class="title">Doweload</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>切换到根目录</li>
</ol>
<p>*<em>cd \ *</em> </p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="function">e:\<span class="title">Doweload</span>&gt;<span class="title">cd</span> \</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">e</span>:\&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>新建目录</li>
</ol>
<p><strong>md</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e:\&gt;md test</span><br><span class="line"></span><br><span class="line">e:\&gt;dir</span><br><span class="line"> 驱动器 E 中的卷是 新加卷</span><br><span class="line"> 卷的序列号是 30EC-F122</span><br><span class="line"></span><br><span class="line"> e:\ 的目录</span><br><span class="line"></span><br><span class="line">2020&#x2F;09&#x2F;10  18:53    &lt;DIR&gt;          dingchunhui</span><br><span class="line">2020&#x2F;09&#x2F;12  21:13    &lt;DIR&gt;          Doweload</span><br><span class="line">2020&#x2F;09&#x2F;12  22:13    &lt;DIR&gt;          test</span><br><span class="line">2020&#x2F;09&#x2F;11  19:53    &lt;DIR&gt;          ubutun20.04</span><br><span class="line">2020&#x2F;09&#x2F;11  00:23    &lt;DIR&gt;          VM</span><br><span class="line">2020&#x2F;09&#x2F;11  00:35    &lt;DIR&gt;          新建文件夹</span><br><span class="line">               0 个文件              0 字节</span><br><span class="line">               6 个目录 983,124,643,840 可用字节</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>删除目录</li>
</ol>
<p><strong>rd</strong></p>
<p>rd /q 不询问</p>
<p>rd /s 当目录里有文件时使用这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e:\&gt;dir</span><br><span class="line"> 驱动器 E 中的卷是 新加卷</span><br><span class="line"> 卷的序列号是 30EC-F122</span><br><span class="line"></span><br><span class="line"> e:\ 的目录</span><br><span class="line"></span><br><span class="line">2020&#x2F;09&#x2F;10  18:53    &lt;DIR&gt;          dingchunhui</span><br><span class="line">2020&#x2F;09&#x2F;12  21:13    &lt;DIR&gt;          Doweload</span><br><span class="line">2020&#x2F;09&#x2F;12  22:13    &lt;DIR&gt;          test</span><br><span class="line">2020&#x2F;09&#x2F;11  19:53    &lt;DIR&gt;          ubutun20.04</span><br><span class="line">2020&#x2F;09&#x2F;11  00:23    &lt;DIR&gt;          VM</span><br><span class="line">2020&#x2F;09&#x2F;11  00:35    &lt;DIR&gt;          新建文件夹</span><br><span class="line">               0 个文件              0 字节</span><br><span class="line">               6 个目录 983,124,643,840 可用字节</span><br><span class="line"></span><br><span class="line">e:\&gt;rd test</span><br><span class="line"></span><br><span class="line">e:\&gt;dir</span><br><span class="line"> 驱动器 E 中的卷是 新加卷</span><br><span class="line"> 卷的序列号是 30EC-F122</span><br><span class="line"></span><br><span class="line"> e:\ 的目录</span><br><span class="line"></span><br><span class="line">2020&#x2F;09&#x2F;10  18:53    &lt;DIR&gt;          dingchunhui</span><br><span class="line">2020&#x2F;09&#x2F;12  21:13    &lt;DIR&gt;          Doweload</span><br><span class="line">2020&#x2F;09&#x2F;11  19:53    &lt;DIR&gt;          ubutun20.04</span><br><span class="line">2020&#x2F;09&#x2F;11  00:23    &lt;DIR&gt;          VM</span><br><span class="line">2020&#x2F;09&#x2F;11  00:35    &lt;DIR&gt;          新建文件夹</span><br><span class="line">               0 个文件              0 字节</span><br><span class="line">               5 个目录 983,124,643,840 可用字节</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>echo指令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e:\&gt;echo hello &gt; Doweload\test.txt</span><br><span class="line"></span><br><span class="line">e:\&gt;dir Doweload</span><br><span class="line"> 驱动器 E 中的卷是 新加卷</span><br><span class="line"> 卷的序列号是 30EC-F122</span><br><span class="line"></span><br><span class="line"> e:\Doweload 的目录</span><br><span class="line"></span><br><span class="line">2020&#x2F;09&#x2F;12  22:21    &lt;DIR&gt;          .</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21    &lt;DIR&gt;          ..</span><br><span class="line">2020&#x2F;09&#x2F;11  13:21       113,897,472 boinc_7.16.11_windows_x86_64_vbox.exe</span><br><span class="line">2020&#x2F;09&#x2F;11  13:23    &lt;DIR&gt;          briblo_103</span><br><span class="line">2020&#x2F;09&#x2F;11  13:18         3,807,157 briblo_103.zip</span><br><span class="line">2020&#x2F;09&#x2F;12  19:12         1,550,147 C 学习笔记.pdf</span><br><span class="line">2020&#x2F;09&#x2F;11  13:16    &lt;DIR&gt;          fliqlo_133</span><br><span class="line">2020&#x2F;09&#x2F;11  13:16         3,804,811 fliqlo_133.zip</span><br><span class="line">2020&#x2F;09&#x2F;12  19:14         1,014,280 Go 1.5 源码剖析 （书签版）.pdf</span><br><span class="line">2020&#x2F;09&#x2F;12  19:12         1,365,184 Go 学习笔记 第四版.pdf</span><br><span class="line">2020&#x2F;09&#x2F;11  13:17         4,339,940 Hubble3D_PCScreensaver.exe</span><br><span class="line">2020&#x2F;09&#x2F;12  21:13    &lt;DIR&gt;          MLofAndrew-Ng-master</span><br><span class="line">2020&#x2F;09&#x2F;11  13:52        36,728,520 Qv2ray.v2.6.3.linux-x64 (1).AppImage</span><br><span class="line">2020&#x2F;09&#x2F;11  13:51        36,728,520 Qv2ray.v2.6.3.linux-x64.AppImage</span><br><span class="line">2020&#x2F;09&#x2F;10  19:23    &lt;DIR&gt;          TeamViewerPortable</span><br><span class="line">2020&#x2F;09&#x2F;10  19:22        27,316,451 TeamViewerPortable.rar</span><br><span class="line">2020&#x2F;09&#x2F;10  19:21        28,032,224 TeamViewer_Setup.exe</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21                 8 test.txt</span><br><span class="line">2020&#x2F;09&#x2F;11  00:22       579,181,704 VMware-workstation-full-15.5.6-16341506.exe</span><br><span class="line">2020&#x2F;09&#x2F;11  00:18             1,617 vmwarepro_16025.zip</span><br><span class="line">2020&#x2F;09&#x2F;12  19:12           235,516 下载.png</span><br><span class="line">              15 个文件    838,003,551 字节</span><br><span class="line">               6 个目录 983,124,643,840 可用字节</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>复制文件</li>
</ol>
<p><strong>copy</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e:\&gt;copy Doweload\test.txt e\</span><br><span class="line">系统找不到指定的路径。</span><br><span class="line">已复制         0 个文件。</span><br><span class="line"></span><br><span class="line">e:\&gt;copy Doweload\test.txt e:\</span><br><span class="line">已复制         1 个文件。</span><br><span class="line"></span><br><span class="line">e:\&gt;dir</span><br><span class="line"> 驱动器 E 中的卷是 新加卷</span><br><span class="line"> 卷的序列号是 30EC-F122</span><br><span class="line"></span><br><span class="line"> e:\ 的目录</span><br><span class="line"></span><br><span class="line">2020&#x2F;09&#x2F;10  18:53    &lt;DIR&gt;          dingchunhui</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21    &lt;DIR&gt;          Doweload</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21                 8 test.txt</span><br><span class="line">2020&#x2F;09&#x2F;11  19:53    &lt;DIR&gt;          ubutun20.04</span><br><span class="line">2020&#x2F;09&#x2F;11  00:23    &lt;DIR&gt;          VM</span><br><span class="line">2020&#x2F;09&#x2F;11  00:35    &lt;DIR&gt;          新建文件夹</span><br><span class="line">               1 个文件              8 字节</span><br><span class="line">               5 个目录 983,124,643,840 可用字节</span><br><span class="line"></span><br><span class="line">e:\&gt;copy Doweload\test.txt e:\hello.txt</span><br><span class="line">已复制         1 个文件。</span><br><span class="line"></span><br><span class="line">e:\&gt;dir</span><br><span class="line"> 驱动器 E 中的卷是 新加卷</span><br><span class="line"> 卷的序列号是 30EC-F122</span><br><span class="line"></span><br><span class="line"> e:\ 的目录</span><br><span class="line"></span><br><span class="line">2020&#x2F;09&#x2F;10  18:53    &lt;DIR&gt;          dingchunhui</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21    &lt;DIR&gt;          Doweload</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21                 8 hello.txt</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21                 8 test.txt</span><br><span class="line">2020&#x2F;09&#x2F;11  19:53    &lt;DIR&gt;          ubutun20.04</span><br><span class="line">2020&#x2F;09&#x2F;11  00:23    &lt;DIR&gt;          VM</span><br><span class="line">2020&#x2F;09&#x2F;11  00:35    &lt;DIR&gt;          新建文件夹</span><br><span class="line">               2 个文件             16 字节</span><br><span class="line">               5 个目录 983,124,643,840 可用字节</span><br></pre></td></tr></table></figure>



<ol start="9">
<li>删除文件</li>
</ol>
<p><strong>del</strong> 文件名</p>
<p>del * 删除全部文件</p>
<p>del *.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e:\&gt;dir</span><br><span class="line"> 驱动器 E 中的卷是 新加卷</span><br><span class="line"> 卷的序列号是 30EC-F122</span><br><span class="line"></span><br><span class="line"> e:\ 的目录</span><br><span class="line"></span><br><span class="line">2020&#x2F;09&#x2F;10  18:53    &lt;DIR&gt;          dingchunhui</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21    &lt;DIR&gt;          Doweload</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21                 8 hello.txt</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21                 8 test.txt</span><br><span class="line">2020&#x2F;09&#x2F;11  19:53    &lt;DIR&gt;          ubutun20.04</span><br><span class="line">2020&#x2F;09&#x2F;11  00:23    &lt;DIR&gt;          VM</span><br><span class="line">2020&#x2F;09&#x2F;11  00:35    &lt;DIR&gt;          新建文件夹</span><br><span class="line">               2 个文件             16 字节</span><br><span class="line">               5 个目录 983,124,643,840 可用字节</span><br><span class="line"></span><br><span class="line">e:\&gt;del test.txt</span><br><span class="line"></span><br><span class="line">e:\&gt;dir</span><br><span class="line"> 驱动器 E 中的卷是 新加卷</span><br><span class="line"> 卷的序列号是 30EC-F122</span><br><span class="line"></span><br><span class="line"> e:\ 的目录</span><br><span class="line"></span><br><span class="line">2020&#x2F;09&#x2F;10  18:53    &lt;DIR&gt;          dingchunhui</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21    &lt;DIR&gt;          Doweload</span><br><span class="line">2020&#x2F;09&#x2F;12  22:21                 8 hello.txt</span><br><span class="line">2020&#x2F;09&#x2F;11  19:53    &lt;DIR&gt;          ubutun20.04</span><br><span class="line">2020&#x2F;09&#x2F;11  00:23    &lt;DIR&gt;          VM</span><br><span class="line">2020&#x2F;09&#x2F;11  00:35    &lt;DIR&gt;          新建文件夹</span><br><span class="line">               1 个文件              8 字节</span><br><span class="line">               5 个目录 983,124,643,840 可用字节</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>清屏</li>
</ol>
<p><strong>cls</strong> </p>
<ol start="11">
<li>推出dos</li>
</ol>
<p><strong>exit</strong> </p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>git学习2</title>
    <url>/2020/09/07/git%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<h1 id="git命令的补充"><a href="#git命令的补充" class="headerlink" title="git命令的补充"></a>git命令的补充</h1><ol>
<li>git add . <strong>提交全部文件到暂存区</strong></li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>git学习</title>
    <url>/2020/06/01/git%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure>

<h1 id="设置ssh-key"><a href="#设置ssh-key" class="headerlink" title="设置ssh key"></a>设置ssh key</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your email&quot;</span><br></pre></td></tr></table></figure>

<h1 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h1><p>初始化仓库以后<strong>git</strong> 才可以对目录里的文件进行跟踪</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p><strong>添加文件到仓库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add &lt;filename&gt;  #添加文件到暂存区</span><br><span class="line">git commit -m &quot;提交描述&quot; #将当前暂存区的文件保存到仓库的历史提交中（就像创建了一个快照，在特定的时期可以将仓库李所有文件回复到一个之前的状态）</span><br></pre></td></tr></table></figure>

<h1 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status #显示Git仓库的状态</span><br></pre></td></tr></table></figure>

<p><strong>查看仓库状态</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch hexo</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;hexo&#39;.</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        &quot;source&#x2F;_posts&#x2F;git\345\255\246\344\271\240.md&quot;</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"># 显示未跟踪的文件有 source&#x2F;_posts&#x2F;git\345\255\246\344\271\240.md ,没有加入暂存区的文件也没有提交的文件</span><br></pre></td></tr></table></figure>

<p><strong>查看修改的内容</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gti diff #查看当前工作树和暂存区</span><br><span class="line">git diff HEAD #查看工作树和最新提交的差别</span><br></pre></td></tr></table></figure>

<p><strong>版本回退</strong> </p>
<ul>
<li>查看提交日志</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log #查看提交日志&#x2F;显示从最近到最远的提交日志   [回退历史版本]</span><br><span class="line">git relog [回退未来的版本]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>git log 的参数</strong> </p>
<p>​    – pretty=short   只显示提交信息的第一行</p>
<p>​    -p    显示文件的改动（查看提交带来的改动）</p>
<p><code>git log &lt;filename&gt;</code>     只显示指定的目录，文件的日志</p>
</blockquote>
<ul>
<li>回溯历史版本</li>
</ul>
<p>在Git用<code>HEAD</code> 表示当前版本，也就是最新的提交，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当往上的版本太多时使用<code>HEAD~数字</code>。 </p>
<p><code>git reset</code> </p>
<p>​    –hard</p>
<h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><p><code>git checkout --&lt;filename&gt;</code>     把文件在工作区的修改全部撤销，让文件回到最近一次<code>git commit</code>或<code>git add</code> 时的状态。</p>
<p><code>git reset HEAD &lt;file&gt;</code>      撤销暂存区的修改</p>
<p><code>git reset HEAD</code>    既可以回退版本，也可以把暂存区的修改回退到工作区。</p>
<ol>
<li>想修改工作区里的文件    <code>git checkout --file</code></li>
<li>想修改暂存区里文件   <code>git reset HEAD &lt;flie&gt;</code></li>
<li>想撤销本次提交  <code>git reset^</code></li>
</ol>
<h1 id="文件删除与恢复"><a href="#文件删除与恢复" class="headerlink" title="文件删除与恢复"></a>文件删除与恢复</h1><ul>
<li>从版本库里删除文件    先在目录里删除文件<code>rm &lt;file</code>再在版本库里删除对应的文件<code>git rm</code></li>
<li>从版本库里恢复文件    <code>git checkout --&lt;file&gt;</code></li>
</ul>
<p>无论你删除或恢复一个文件以后进行提交，git都会为你保存一个版本，你都可以通过版本回退来找到自己需要的版本。</p>
<h1 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h1><p><code>git remote add origin git@github.com:用户名/仓库名.git</code></p>
<p>origin可以修改，origin是远程仓库的标识符</p>
<h1 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master #-u参数可以在推送的时候，将origin仓库的master分支设置为本地分支当前分支的upstream（上游）。添加了这个参数，将来在 git pull 的时候可以直接从origin的master分支获取最新的内容而不用添加其他参数。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin &lt;分知名&gt;</span><br></pre></td></tr></table></figure>

<h1 id="获取远程仓库"><a href="#获取远程仓库" class="headerlink" title="获取远程仓库"></a>获取远程仓库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:用户名&#x2F;仓库名.git</span><br><span class="line">#默认处于远程仓库的默认分支下，同时系统会自动将origin设置为该远程仓库的标识符</span><br></pre></td></tr></table></figure>

<h2 id="获取远程仓库的其他分支"><a href="#获取远程仓库的其他分支" class="headerlink" title="获取远程仓库的其他分支"></a>获取远程仓库的其他分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b other origin&#x2F;others</span><br><span class="line"># -b参数后是本地新建分支的名称，新建分支后面的是获取来源的分支名称</span><br><span class="line">git fetch origin other:others</span><br><span class="line"># origin后面的分别是本地分支和远程仓库分支</span><br></pre></td></tr></table></figure>

<p><strong>注意获取其他分支需要与远程仓库相关联</strong> </p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>go基本数据类型转string</title>
    <url>/2020/09/21/go%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%ACstring/</url>
    <content><![CDATA[<h1 id="Go基本数据类型转string"><a href="#Go基本数据类型转string" class="headerlink" title="Go基本数据类型转string"></a>Go基本数据类型转string</h1><ol>
<li>fmt.Sprintf()</li>
<li>strconv包函数 </li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str = strconv.FormatInt(<span class="keyword">int64</span>(num3),<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>strconv.Itoa()</li>
</ol>
<h1 id="string转其他数据类型"><a href="#string转其他数据类型" class="headerlink" title="string转其他数据类型"></a>string转其他数据类型</h1><p>strconv.ParseInt(   )</p>
<p>strconv.ParseBool(    )</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>jmu-python-偶数之积</title>
    <url>/2020/09/28/jmu-python-%E5%81%B6%E6%95%B0%E4%B9%8B%E7%A7%AF/</url>
    <content><![CDATA[<h1 id="7-4-jmu-python-偶数之积-10分"><a href="#7-4-jmu-python-偶数之积-10分" class="headerlink" title="7-4 jmu-python-偶数之积 (10分)"></a>7-4 jmu-python-偶数之积 (10分)</h1><p>求1到n中所有偶数的积。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入整数n。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>1到n中偶数积。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">sum = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>) :</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> ==<span class="number">0</span> :</span><br><span class="line">        sum=i*sum</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>go数据类型的默认值及转换</title>
    <url>/2020/09/20/go%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC/</url>
    <content><![CDATA[<h1 id="go语言的数据类型的零值"><a href="#go语言的数据类型的零值" class="headerlink" title="go语言的数据类型的零值"></a>go语言的数据类型的零值</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">float32</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">float64</span></span><br><span class="line">	<span class="keyword">var</span> is <span class="keyword">bool</span></span><br><span class="line">	<span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line">	fmt.Printf(<span class="string">"a=%d,b=%d,c=%d,is=%v,name=%v"</span>,a,b,c,is,name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>整型</td>
<td>0</td>
</tr>
<tr>
<td>浮点型</td>
<td>0</td>
</tr>
<tr>
<td>字符串</td>
<td>空串</td>
</tr>
<tr>
<td>指针</td>
<td>nil</td>
</tr>
</tbody></table>
<h1 id="go语言数据类型转化"><a href="#go语言数据类型转化" class="headerlink" title="go语言数据类型转化"></a>go语言数据类型转化</h1><p>go语言没有自动转化，需要显性转化</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> fmt</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">    <span class="comment">//i-&gt;float32</span></span><br><span class="line">    <span class="keyword">var</span> n1 <span class="keyword">float32</span> = <span class="keyword">float32</span>(i)</span><br><span class="line">    <span class="keyword">var</span> n2 <span class="keyword">int64</span> = <span class="keyword">int64</span>(i)</span><br><span class="line">    fmt.printf(<span class="string">"i=%d,n1=%v"</span>,i,n1)<span class="comment">//%v使用默认格式输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="go-数据类型转化的细节"><a href="#go-数据类型转化的细节" class="headerlink" title="go 数据类型转化的细节"></a>go 数据类型转化的细节</h1><ul>
<li>被转化的是变量存储的数据（即值），变量本身是没有转变的</li>
<li>如果转化的数据由大到小可能会发生数据溢出，如int64强制转化为int8，编译不会报错，但是数据会发生数据溢出，按二进制进行溢出</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n1 <span class="keyword">int32</span> = <span class="number">12</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="keyword">int64</span> </span><br><span class="line"><span class="keyword">var</span> n3 <span class="keyword">int</span> <span class="number">8</span></span><br><span class="line">n2 = n1 + <span class="number">20</span>  <span class="comment">//int32--&gt;int 64</span></span><br><span class="line">n2 = <span class="keyword">int64</span>(n1) + <span class="number">20</span> <span class="comment">//正确</span></span><br><span class="line">n2 = <span class="keyword">int8</span>(n1) +<span class="number">127</span> <span class="comment">//编译通过，但是数据溢出</span></span><br><span class="line">n2 = <span class="keyword">int8</span>(n1) + <span class="number">128</span><span class="comment">//编译不通过，128超出int8的范围</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>hexo常用指令</title>
    <url>/2020/09/07/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>*<em>1.hexo n *</em> 新建一篇文章</p>
<p>*<em>2. hexo init *</em> 初始化一个网站</p>
<p>*<em>3. hexo g *</em> 生成静态文件，在发布到GitHub前需要先生成静态文件</p>
<p>*<em>4. hexo s *</em> 启动服务器，可以在本地访问，访问地址为<code>http://localhost:4000/</code></p>
<p>*<em>5. hexo d *</em> 部署网站【发布到GitHub】 </p>
]]></content>
      <categories>
        <category>hexo的使用</category>
      </categories>
  </entry>
  <entry>
    <title>jmu-python-凯撒密码加密算法</title>
    <url>/2020/09/28/jmu-python-%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="7-1-jmu-python-凯撒密码加密算法-10分"><a href="#7-1-jmu-python-凯撒密码加密算法-10分" class="headerlink" title="7-1 jmu-python-凯撒密码加密算法 (10分)"></a>7-1 jmu-python-凯撒密码加密算法 (10分)</h1><p>编写一个凯撒密码加密程序，接收用户输入的文本和密钥k，对明文中的字母a-z和字母A-Z替换为其后第k个字母。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>接收两行输入，第一行为待加密的明文，第二行为密钥k。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出加密后的密文。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><p>在这里给出一组输入。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><p>在这里给出相应的输出。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Khoor Zruog!</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>,<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>]</span><br><span class="line">s2 = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'O'</span>,<span class="string">'P'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'W'</span>,<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'Z'</span>]</span><br><span class="line">s = input()</span><br><span class="line">k = int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'a'</span> &lt;= s[i] &lt;= <span class="string">'z'</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> s1[j] == s[i]:</span><br><span class="line">                print(<span class="string">"&#123;&#125;"</span>.format(s1[(j + k) % <span class="number">26</span>]), end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'A'</span> &lt;= s[i] &lt;= <span class="string">'Z'</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> s2[j] == s[i]:</span><br><span class="line">                print(<span class="string">"&#123;&#125;"</span>.format(s2[(j + k) % <span class="number">26</span>]), end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"&#123;&#125;"</span>.format(s[i]),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>jmu-python-分段函数</title>
    <url>/2020/09/28/jmu-python-%E5%88%86%E6%AE%B5%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="7-3-jmu-python-分段函数-10分"><a href="#7-3-jmu-python-分段函数-10分" class="headerlink" title="7-3 jmu-python-分段函数 (10分)"></a>7-3 jmu-python-分段函数 (10分)</h1><p>本题目要求计算下列分段函数f(x)的值（x为从键盘输入的一个任意实数）：</p>
<p><img src="https://images.ptausercontent.com/625099ce-3e8d-4a2f-a719-99929e1e027e.jpg" alt="分段函数.jpg"></p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行中给出实数 x。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中按“f(x)=result”的格式输出，其中<strong>x与result都保留两位小数</strong>。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.76</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(0.76)&#x3D;1.20</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = eval(input())</span><br><span class="line"><span class="keyword">if</span> x&lt;<span class="number">3</span> :</span><br><span class="line">    print(<span class="string">"f(%.2f)=%.2f"</span> %(x,<span class="number">1.2</span>))</span><br><span class="line"><span class="keyword">elif</span> x==<span class="number">3</span> :</span><br><span class="line">    print(<span class="string">"f(%.2f)=%.2f"</span> %(x,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">elif</span> x&gt;<span class="number">3</span> :</span><br><span class="line">    num = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">    print(<span class="string">"f(%.2f)=%.2f"</span> %(x,num))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>jmu-python-判断闰年</title>
    <url>/2020/09/28/jmu-python-%E5%88%A4%E6%96%AD%E9%97%B0%E5%B9%B4/</url>
    <content><![CDATA[<h3 id="7-5-jmu-python-判断闰年-10分"><a href="#7-5-jmu-python-判断闰年-10分" class="headerlink" title="7-5 jmu-python-判断闰年 (10分)"></a>7-5 jmu-python-判断闰年 (10分)</h3><p>输入一个年份，判断其是否为闰年。</p>
<p>判断闰年的标准：能被4整除但不能被100整除，或者能被400整除的年份是闰年。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>直接输入一个4位数年份，没有其它任何附加字符。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出<code>year是闰年</code> 或者<code>year不是闰年</code></p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1900</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1900不是闰年</span><br></pre></td></tr></table></figure>

<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1904</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1904是闰年</span><br></pre></td></tr></table></figure>

<h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2000</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2000是闰年</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a =int(input())</span><br><span class="line"><span class="keyword">if</span> (a%<span class="number">4</span>==<span class="number">0</span> <span class="keyword">and</span> a%<span class="number">100</span>!=<span class="number">0</span>) <span class="keyword">or</span> a%<span class="number">400</span>==<span class="number">0</span>:</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;a&#125;</span>是闰年'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;a&#125;</span>不是闰年'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>jmu-python-汇率兑换</title>
    <url>/2020/09/28/jmu-python-%E6%B1%87%E7%8E%87%E5%85%91%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="7-1-jmu-python-汇率兑换-10分"><a href="#7-1-jmu-python-汇率兑换-10分" class="headerlink" title="7-1 jmu-python-汇率兑换 (10分)"></a>7-1 jmu-python-汇率兑换 (10分)</h3><p>按照1美元=6人民币的汇率编写一个美元和人民币的双向兑换程序</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入人民币或美元的金额，人民币格式如：R100，美元格式如：$100</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出经过汇率计算的美元或人民币的金额，格式与输入一样，币种在前，金额在后，结果保留两位小数</p>
<h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1:"></a>输入样例1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R60</span><br></pre></td></tr></table></figure>

<h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$10.00</span><br></pre></td></tr></table></figure>

<h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2:"></a>输入样例2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$5</span><br></pre></td></tr></table></figure>

<h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R30.00</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">money=input()</span><br><span class="line">unit = money[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> money[<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">    U=eval(money[<span class="number">1</span>:])/<span class="number">6</span></span><br><span class="line">    print(<span class="string">"$%.2f"</span> % U)</span><br><span class="line"><span class="keyword">elif</span> money[<span class="number">0</span>] == <span class="string">'$'</span>:</span><br><span class="line">    R=<span class="number">6</span>*eval(money[<span class="number">1</span>:])</span><br><span class="line">    print(<span class="string">"R%.2f"</span> %R)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>jmu-python-回文数判断</title>
    <url>/2020/09/28/jmu-python-%E5%9B%9E%E6%96%87%E6%95%B0%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h3 id="7-2-jmu-python-回文数判断（5位数字）-10分"><a href="#7-2-jmu-python-回文数判断（5位数字）-10分" class="headerlink" title="7-2 jmu-python-回文数判断（5位数字） (10分)"></a>7-2 jmu-python-回文数判断（5位数字） (10分)</h3><p>本题目要求输入一个5位自然数n，如果n的各位数字反向排列所得的自然数与n相等，则输出‘yes’，否则输出‘no’。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>13531</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>yes</p>
<h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1:"></a>输入样例1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13531</span><br></pre></td></tr></table></figure>

<h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yes</span><br></pre></td></tr></table></figure>

<h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2:"></a>输入样例2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13530</span><br></pre></td></tr></table></figure>

<h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">no</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = input()</span><br><span class="line"><span class="keyword">if</span> num[<span class="number">0</span>] == num[<span class="number">-1</span>]<span class="keyword">and</span> num[<span class="number">1</span>]==num[<span class="number">-2</span>]:</span><br><span class="line">    print(<span class="string">"yes"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"no"</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>jmu-python-找字符</title>
    <url>/2020/09/28/jmu-python-%E6%89%BE%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="7-5-jmu-python-找字符-15分"><a href="#7-5-jmu-python-找字符-15分" class="headerlink" title="7-5 jmu-python-找字符 (15分)"></a>7-5 jmu-python-找字符 (15分)</h1><p>输入一个字符串及字符，输出第一次出现该字符的位置。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><ul>
<li>行1：输入字符串</li>
<li>行2：输入一个字符</li>
</ul>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><ul>
<li>找到，输出对应位置，格式<code>index=X</code>的， <code>X</code>表示查找到位置</li>
<li>找不到，输出<code>can&#39;t find letter X</code>, <code>X</code>表示查找字符</li>
</ul>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">t</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index&#x3D;3</span><br></pre></td></tr></table></figure>

<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">l</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">can&#39;t find letter l</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = input()</span><br><span class="line">key = input()</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">num =<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">    num=num+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> key == s[i] :</span><br><span class="line">        print(<span class="string">"index=%d"</span>%num)</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> count==<span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"can't find letter %s"</span>%key)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>jmu-python-统计成绩</title>
    <url>/2020/09/28/jmu-python-%E7%BB%9F%E8%AE%A1%E6%88%90%E7%BB%A9/</url>
    <content><![CDATA[<h1 id="7-3-jmu-python-统计成绩-15分"><a href="#7-3-jmu-python-统计成绩-15分" class="headerlink" title="7-3 jmu-python-统计成绩 (15分)"></a>7-3 jmu-python-统计成绩 (15分)</h1><p>输入一批学生成绩，计算平均成绩，并统计不及格学生人数。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>每行输入一个数据，输入数据为<code>负数</code>结束输入</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">平均分&#x3D;XX,不及格人数&#x3D;XX&#96;,其中&#96;XX&#96;表示对应数据。如果没有学生数据，输出&#96;没有学生</span><br></pre></td></tr></table></figure>

<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30</span><br><span class="line">50</span><br><span class="line">70</span><br><span class="line">80</span><br><span class="line">90</span><br><span class="line">20</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">平均分&#x3D;56.67,不及格人数&#x3D;3</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = int(input())</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">sum =<span class="number">0</span> </span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>):</span><br><span class="line">    print(<span class="string">"没有学生"</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">    count = count+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">60</span>:</span><br><span class="line">        num = num+<span class="number">1</span></span><br><span class="line">    sum = sum + x</span><br><span class="line">    x = eval(input())</span><br><span class="line">ave = sum/count</span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">0</span>):</span><br><span class="line">    print(<span class="string">"平均分=%.2f,不及格人数=%d"</span> % (ave, num))</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">0</span>):</span><br><span class="line">    print(<span class="string">"没有学生"</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>jmu-python-韩信点兵</title>
    <url>/2020/09/28/jmu-python-%E9%9F%A9%E4%BF%A1%E7%82%B9%E5%85%B5/</url>
    <content><![CDATA[<h1 id="7-2-jmu-python-韩信点兵-10分"><a href="#7-2-jmu-python-韩信点兵-10分" class="headerlink" title="7-2 jmu-python-韩信点兵 (10分)"></a>7-2 jmu-python-韩信点兵 (10分)</h1><p>在中国数学史上，广泛流传着一个“韩信点兵”的故事：韩信是汉高祖刘邦手下的大将，他英勇善战，智谋超群，为汉朝建立了卓越的功劳。据说韩信的数学水平也非常高超，他在点兵的时候，为了知道有多少兵，同时又能保住军事机密，便让士兵排队报数：</p>
<p>按从1至5报数，记下最末一个士兵报的数为1； 再按从1至6报数，记下最末一个士兵报的数为5； 再按从1至7报数，记下最末一个士兵报的数为4； 最后按从1至11报数，最末一个士兵报的数为10； 请编写程序计算韩信至少有多少兵。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>无输入</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出韩信至少拥有的士兵人数。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无输入</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出人数</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">1</span>) <span class="keyword">and</span> (i % <span class="number">6</span> == <span class="number">5</span>) <span class="keyword">and</span> (i % <span class="number">7</span> == <span class="number">4</span>) <span class="keyword">and</span> (i % <span class="number">11</span> == <span class="number">10</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>linux_帮助命令</title>
    <url>/2020/06/03/linux-%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h1><ul>
<li>man</li>
<li>help</li>
<li>info</li>
</ul>
<p>命令用法演示</p>
<p><code>man ls</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME</span><br><span class="line">       ls - list directory contents</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ls [OPTION]... [FILE]...</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       List  information  about  the FILEs (the current directory by default).</span><br><span class="line">       Sort entries alphabetically if none of -cftuvSUX nor --sort  is  speci‐</span><br><span class="line">       fied.</span><br><span class="line"></span><br><span class="line">       Mandatory  arguments  to  long  options are mandatory for short options</span><br><span class="line">       too.</span><br><span class="line"></span><br><span class="line">       -a, --all</span><br><span class="line">              do not ignore entries starting with .</span><br><span class="line"></span><br><span class="line">       -A, --almost-all</span><br><span class="line">              do not list implied . and ..</span><br><span class="line"> 省略......</span><br></pre></td></tr></table></figure>

<p><code>help help</code>或 <code>help --help</code></p>
<blockquote>
<p>help [-dms] [模式 …]<br>   显示内建命令的相关信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">显示内建命令的简略信息。如果指定了 PATTERN 模式，</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">给出所有匹配 PATTERN 模式的命令的详细帮助，否则打</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">印一个帮助主题列表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">选项：</span></span><br><span class="line"> -d	输出每个主题的简短描述</span><br><span class="line"> -m	以伪 man 手册的格式显示使用方法</span><br><span class="line"> -s	为每一个匹配 PATTERN 模式的主题仅显示一个用法</span><br><span class="line">简介</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">参数：</span></span><br><span class="line"> PATTERN	指定帮助主题的模式</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">退出状态：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">返回成功，除非未找到 PATTERN 模式没有找到或者使用了无效选项。</span></span><br></pre></td></tr></table></figure>

</blockquote>
<p><code>info ls</code></p>
<blockquote>
<p>ext: dir invocation,  Up: Directory listing</p>
<h1 id="10-1-‘ls’-List-directory-contents"><a href="#10-1-‘ls’-List-directory-contents" class="headerlink" title="10.1 ‘ls’: List directory contents"></a>10.1 ‘ls’: List directory contents</h1><p>The ‘ls’ program lists information about files (of any type, including<br>directories).  Options and file arguments can be intermixed arbitrarily,<br>as usual.</p>
<p>   For non-option command-line arguments that are directories, by<br>default ‘ls’ lists the contents of directories, not recursively, and<br>omitting files with names beginning with ‘.’.  For other non-option<br>arguments, by default ‘ls’ lists just the file name.  If no non-option<br>argument is specified, ‘ls’ operates on the current directory, acting as<br>if it had been invoked with a single argument of ‘.’.</p>
<p>   By default, the output is sorted alphabetically, according to the<br>locale settings in effect.(1)  If standard output is a terminal, the<br>output is in columns (sorted vertically) and control characters are<br>output as question marks; otherwise, the output is listed one per line<br>and control characters are output as-is.</p>
<p>省略…</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux_ls</title>
    <url>/2020/06/03/linux-ls/</url>
    <content><![CDATA[<h1 id="ls与pwd"><a href="#ls与pwd" class="headerlink" title="ls与pwd"></a>ls与pwd</h1><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p><strong>pwd</strong>     –显示当前所在的目录</p>
<p>演示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~$ pwd</span><br><span class="line">/home/zhaobuqi</span><br></pre></td></tr></table></figure>

<blockquote>
<p>名称<br>       pwd - 显示出当前/活动目录的名称</p>
<p>概述<br>       pwd [选项]…</p>
<p>描述<br>       输出当前工作目录的完整名称。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-L, --logical</span><br><span class="line">       使用环境变量中的 PWD，即使其中包含符号链接</span><br><span class="line"></span><br><span class="line">-P, --physical</span><br><span class="line">       避免所有符号链接</span><br><span class="line"></span><br><span class="line">--help 显示此帮助信息并退出</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line">       显示版本信息并退出</span><br><span class="line"></span><br><span class="line">如果没有指定任何选项，默认使用 -P。</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><strong>ls</strong>     查看指定目录的内容</p>
<blockquote>
<p>ls [选项] [文件名…]</p>
</blockquote>
<p><strong>常用ls的参数</strong> </p>
<ul>
<li><strong>-l</strong> </li>
</ul>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-l, --format=long, --format=verbose</span><br><span class="line">              除每个文件名外，增加显示文件类型、权限、硬链接数、所  有者名、组</span><br><span class="line">              名、大小（  byte  ）、及时间信息（如未指明是  其它时间即指修改时</span><br><span class="line">              间）。对于6个月以上的文件或超出未来 1 小时的文件，时间信息中的时</span><br><span class="line">              分将被年代取代。</span><br></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~$ ls -l</span><br><span class="line">总用量 76</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 6月   2 20:48  公共的</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 5月  30 18:52  模板</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 6月   2 20:48  视频</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 5月  31 21:45  图片</span><br><span class="line">drwxr-xr-x 4 zhaobuqi zhaobuqi  4096 5月  29 13:29  文档</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 6月   2 21:07  下载</span><br><span class="line">drwxr-xr-x 3 zhaobuqi zhaobuqi  4096 5月  29 12:54  音乐</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 5月  29 13:18  桌面</span><br><span class="line">drwxrwxr-x 5 zhaobuqi zhaobuqi  4096 5月  29 13:29  baidunetdisk</span><br><span class="line">drwxrwxr-x 3 zhaobuqi zhaobuqi  4096 6月   3 15:03  go</span><br><span class="line">drwxrwxr-x 3 zhaobuqi zhaobuqi  4096 6月   3 15:02  go_code</span><br><span class="line">-rw-r--r-- 1 zhaobuqi zhaobuqi 10013 6月   3 15:40 &#39;- list directory contents&#39;</span><br><span class="line">drwxrwxr-x 4 zhaobuqi zhaobuqi  4096 5月  30 17:58  my_app</span><br><span class="line">drwxr-xr-x 3 zhaobuqi zhaobuqi  4096 5月  28 19:46  snap</span><br><span class="line">-rw-r--r-- 1 zhaobuqi zhaobuqi 10013 6月   3 15:40 &#39;t  information  about  the FILEs (the current directory by default).</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>-a</strong> </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a, --all</span><br><span class="line">             列出目录中所有文件，包括以“.”开头的文件。</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~$ ls -a</span><br><span class="line"> .</span><br><span class="line"> ..</span><br><span class="line"> 公共的</span><br><span class="line"> 模板</span><br><span class="line"> 视频</span><br><span class="line"> 图片</span><br><span class="line"> 文档</span><br><span class="line"> 下载</span><br><span class="line"> 音乐</span><br><span class="line"> 桌面</span><br><span class="line"> .accelerate</span><br><span class="line"> baidunetdisk</span><br><span class="line"> .bash_history</span><br><span class="line"> .bash_logout</span><br><span class="line"> .bashrc</span><br><span class="line"> .cache</span><br><span class="line"> .config</span><br><span class="line"> .dbus</span><br><span class="line"> .deepinwine</span><br><span class="line"> .designer</span><br><span class="line"> .gitconfig</span><br><span class="line"> .gnupg</span><br><span class="line"> go</span><br><span class="line"> go_code</span><br><span class="line"> .kingsoft</span><br><span class="line">'- list directory contents'</span><br><span class="line"> .local</span><br><span class="line"> .mono</span><br><span class="line"> .mozilla</span><br><span class="line"> my_app</span><br><span class="line"> .node_repl_history</span><br><span class="line"> .npm</span><br><span class="line"> .npmrc</span><br><span class="line"> .nv</span><br><span class="line"> .pam_environment</span><br><span class="line"> .pki</span><br><span class="line"> .presage</span><br><span class="line"> .profile</span><br><span class="line"> snap</span><br><span class="line"> .ssh</span><br><span class="line"> .sudo_as_admin_successful</span><br><span class="line">'t  information  about  the FILEs (the current directory by default).'</span><br><span class="line"> .viminfo</span><br><span class="line"> .vscode</span><br><span class="line"> .wine</span><br><span class="line"> .xinputrc</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux-打包与解压缩</title>
    <url>/2020/06/03/linux-%E6%89%93%E5%8C%85%E4%B8%8E%E8%A7%A3%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h1 id="打包与解压缩"><a href="#打包与解压缩" class="headerlink" title="打包与解压缩"></a>打包与解压缩</h1><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar czf /tmp/etc-backup.tar.gz /etc/</span><br></pre></td></tr></table></figure>

<h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xzf /tmp/etc-backup.tar.gz -C /etc/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>ubutun安装qq和微信</title>
    <url>/2020/09/06/ubuntu%E5%AE%89%E8%A3%85qq%E5%92%8C%E5%BE%AE%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="1-安装deepin"><a href="#1-安装deepin" class="headerlink" title="1.安装deepin"></a>1.安装deepin</h2><p><strong>1.使用git将deepin克隆到本地</strong></p>
<blockquote>
<p>git  clone  <a href="https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu" target="_blank" rel="noopener">https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu</a></p>
</blockquote>
<p><strong>2.进入克隆到本地的deepin文件夹</strong></p>
<blockquote>
<p>cd  deepin-wine-for-ubuntu</p>
</blockquote>
<p><strong>3.安装</strong> </p>
<blockquote>
<p>./install.sh</p>
</blockquote>
<h2 id="2-安装qq-微信"><a href="#2-安装qq-微信" class="headerlink" title="2.安装qq,微信"></a>2.安装qq,微信</h2><blockquote>
<p>wget -qO- <a href="https://deepin-wine.i-m.dev/setup.sh" target="_blank" rel="noopener">https://deepin-wine.i-m.dev/setup.sh</a> | sudo sh</p>
<p><code>#安装qq</code></p>
<p>sudo apt-get install deepin.com.wechat</p>
<p><code>#安装微信</code> </p>
<p>sudo apt-get install deepin.com.qq.im</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_目录</title>
    <url>/2020/06/03/linux-%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="常见目录"><a href="#常见目录" class="headerlink" title="常见目录"></a>常见目录</h1><ul>
<li>/  <strong>根目录</strong></li>
<li>/root  <strong>root的家目录</strong> </li>
<li>/home/username  <strong>普通用户的家目录</strong> </li>
<li>/etc  <strong>配置目录</strong> </li>
<li>/bin  <strong>命令目录</strong> </li>
<li>/sbin  <strong>管理目录</strong> </li>
<li>/usr/bin/usr/sbin  <strong>系统预装的其他命令</strong> </li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu下ssh的使用</title>
    <url>/2020/06/02/ubuntu%E4%B8%8Bssh%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh</span><br></pre></td></tr></table></figure>
<h1 id="ssh登录远程服务器"><a href="#ssh登录远程服务器" class="headerlink" title="ssh登录远程服务器"></a>ssh登录远程服务器</h1><blockquote>
<p>ssh -l username  ip</p>
</blockquote>
<blockquote>
<p>ssh username@ip</p>
</blockquote>
<p>输入<strong>exit</strong> 退出连接</p>
<h1 id="ssh上传文件"><a href="#ssh上传文件" class="headerlink" title="ssh上传文件"></a>ssh上传文件</h1><p><code>scp &lt;file&gt; username@ip:dir</code></p>
<h1 id="ssh下载文件"><a href="#ssh下载文件" class="headerlink" title="ssh下载文件"></a>ssh下载文件</h1><p><code>scp usernmae@ip:file dir</code></p>
<h1 id="生成ssh密钥"><a href="#生成ssh密钥" class="headerlink" title="生成ssh密钥"></a>生成ssh密钥</h1><p><code>ssh-keygen</code></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>ubutun修改root用户密码</title>
    <url>/2020/09/15/ubutun%E4%BF%AE%E6%94%B9root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~$ sudo passwd </span><br><span class="line">新的 密码： </span><br><span class="line">重新输入新的 密码： </span><br><span class="line">passwd：已成功更新密码</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu安装typora</title>
    <url>/2020/05/31/ubuntu%E5%AE%89%E8%A3%85typora/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># or run:</span><br><span class="line"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class="line">wget -qO - https:&#x2F;&#x2F;typora.io&#x2F;linux&#x2F;public-key.asc | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"># add Typora&#39;s repository</span><br><span class="line">sudo add-apt-repository &#39;deb https:&#x2F;&#x2F;typora.io&#x2F;linux .&#x2F;&#39;</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># install typora</span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装百度输入法</title>
    <url>/2020/06/02/ubuntu%E5%AE%89%E8%A3%85%E7%99%BE%E5%BA%A6%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<h1 id="解决依赖"><a href="#解决依赖" class="headerlink" title="解决依赖"></a>解决依赖</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通过命令行安装 aptitude</span><br><span class="line">sudo apt-get install aptitude -y</span><br></pre></td></tr></table></figure>
<p>使用aptitude解决安装依赖的问题</p>
<h1 id="安装fcitx"><a href="#安装fcitx" class="headerlink" title="安装fcitx"></a>安装fcitx</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通过命令行利用 aptitude 安装 fcitx 和 qt 等</span><br><span class="line">sudo aptitude install fcitx-bin fcitx-table fcitx-config-gtk fcitx-config-gtk2 fcitx-frontend-all</span><br></pre></td></tr></table></figure>

<h1 id="安装qt5"><a href="#安装qt5" class="headerlink" title="安装qt5"></a>安装qt5</h1><p><strong>注意：不安装qt5,百度输入法无法正常使用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo aptitude install qt5-default qtcreator qml-module-qtquick-controls2</span><br></pre></td></tr></table></figure>

<h1 id="安装百度输入法"><a href="#安装百度输入法" class="headerlink" title="安装百度输入法"></a>安装百度输入法</h1><p>到官网下载百度输入法的压宿包，然后解压，在解压的目录执行以下命令</p>
<p><code>sudo dpkg –i fcitx-baidupinyin.deb</code></p>
<p><strong>注意安装完重启即可，重启以后按照提示进行</strong></p>
<p><a href="https://srf.baidu.com/site/guanwang_linux/index.html" target="_blank" rel="noopener">百度输入法下载</a></p>
<h1 id="卸载百度输入法"><a href="#卸载百度输入法" class="headerlink" title="卸载百度输入法"></a>卸载百度输入法</h1><p><code>sudo dpkg --purge remove fcitx-baidupinyin:amd64</code> </p>
]]></content>
  </entry>
  <entry>
    <title>位运算符</title>
    <url>/2020/10/05/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p><strong>位运算符</strong> </p>
<p><strong>&amp;</strong>     按位与           两个都为1才为1</p>
<p><strong>|</strong>     按位或            只要有一个1就为1</p>
<p><strong>^</strong>     按位异或        不同为1，相同为0</p>
<p><strong>移位运算</strong> </p>
<p><code>&gt;&gt;</code>     右移运算符        低位溢出，符号位不变，并用符号位溢出的高位</p>
<p><code>&lt;&lt;</code>     左移运算符        符号位不变，地位补0</p>
<p><strong>位运算，移位运算都是在补码下进行运算的</strong> </p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>修改路由器wife账号密码</title>
    <url>/2020/09/13/%E4%BF%AE%E6%94%B9%E8%B7%AF%E7%94%B1%E5%99%A8wife%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h1 id="修改wife账号密码"><a href="#修改wife账号密码" class="headerlink" title="修改wife账号密码"></a>修改wife账号密码</h1><p><strong>修改流程</strong> </p>
<ol>
<li><p>连接</p>
<ol>
<li>用网线将电脑与路由器lan口连接</li>
<li>或者电脑连上路由器的wife</li>
</ol>
</li>
<li><p>进入路由器后台1922.168.2.1或者192.168.1.1</p>
</li>
</ol>
<p>在网页输入192.168.1.1或者192.168.2.1即可，登录默认密码为admin</p>
<p><img src="https://i.loli.net/2020/09/13/rdiRTgvj2of75zI.png" alt="image.png"> </p>
<p><img src="https://i.loli.net/2020/09/13/Od9FIZcDlVqmawt.png" alt="image.png"> </p>
<ol start="3">
<li><p>输入密码登录，默认密码为admin</p>
</li>
<li><p>点击左边的网络–无线或者无线设置</p>
<p>1.网络–无线</p>
<p><img src="https://i.loli.net/2020/09/13/dCWpL9FasuXDtr3.png" alt="image.png"> </p>
<p>点击修改（下面的5G同理）</p>
<p>在基础设置里<strong>ESSID填写wife名称</strong> </p>
<p>在无线安全里<strong>加密选择WPA@-P5X</strong>   *<em>算法自动  密码自行设置 *</em> </p>
<p><strong><em>然后保存应用</em></strong> </p>
<ol start="2">
<li><p>无线设置</p>
<p>傻瓜式操作</p>
</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>无重复字符的最长字符</title>
    <url>/2020/09/15/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<p>给定一个字符串，请你找出其中不含有重复字符的<strong>最长子串</strong> 的长度。</p>
<p>示例 1:</p>
<blockquote>
<p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p>
</blockquote>
<p>示例 2:</p>
<blockquote>
<p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p>
</blockquote>
<p>示例 3:</p>
<blockquote>
<p>输入: “pwwkew”</p>
<p>输出: 3</p>
<p>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">char</span> * s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> last_exist[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">char</span>* p = s;</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> offset = <span class="number">0</span>;<span class="comment">//重置长度</span></span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">1</span>;<span class="comment">//第几个出现</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(*s == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)&#123;</span><br><span class="line">            last_exist[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(*p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(last_exist[*p] &gt;= <span class="number">0</span> &amp;&amp; offset &lt; last_exist[*p])&#123;</span><br><span class="line">                offset = last_exist[*p];</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            len = idx - offset;</span><br><span class="line">            max_len = len &gt; max_len?len:max_len;</span><br><span class="line">            last_exist[*p] = idx;</span><br><span class="line">            ++p;</span><br><span class="line">            ++idx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_len;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>如何在ubutun20.04下搭建hexo环境</title>
    <url>/2020/05/28/ubuntu%E6%90%AD%E5%BB%BAhexo/</url>
    <content><![CDATA[<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p><code>sudo apt install nodejs</code></p>
<h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><p><code>sudo apt install npm</code></p>
<h2 id="改用taobao的npm源"><a href="#改用taobao的npm源" class="headerlink" title="改用taobao的npm源"></a>改用taobao的npm源</h2><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code> </p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><code>cnpm install hexo-cli -g</code>  #-g 表示全局安装</p>
<p><strong>注意：必须在root模式下安装</strong> </p>
]]></content>
      <categories>
        <category>hexo的使用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>npm</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>盛最多的水</title>
    <url>/2020/09/13/%E7%9B%9B%E6%9C%80%E5%A4%9A%E7%9A%84%E6%B0%B4/</url>
    <content><![CDATA[<h1 id="盛最多的水"><a href="#盛最多的水" class="headerlink" title="盛最多的水"></a>盛最多的水</h1><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>
<p><img src="https://i.loli.net/2020/09/13/l3MxI8BrwHhGNzj.png" alt="image.png"></p>
<p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
<p>示例：</p>
<blockquote>
<p>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49</p>
</blockquote>
<p>代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>* <span class="built_in">height</span>, <span class="keyword">int</span> heightSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> last=heightSize<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxArea=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tempArea=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(head&lt;last)&#123;</span><br><span class="line">        tempArea=<span class="built_in">min</span>(<span class="built_in">height</span>[head],<span class="built_in">height</span>[last])*(last-head);</span><br><span class="line">        maxArea=<span class="built_in">max</span>(tempArea,maxArea);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">height</span>[last]&gt;=<span class="built_in">height</span>[head])&#123;</span><br><span class="line">            head++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            last--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> head,<span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head&gt;=last)</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">&#125;<span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> head,<span class="keyword">int</span> last)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head&gt;=last)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>本地分支推送到远程分支</title>
    <url>/2020/05/28/%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</url>
    <content><![CDATA[<h2 id="1-有远程分支remote-branch-有本地分支local-branch-本地分支与远程分支关联-已经切换到本地分支"><a href="#1-有远程分支remote-branch-有本地分支local-branch-本地分支与远程分支关联-已经切换到本地分支" class="headerlink" title="1.有远程分支remote_branch,有本地分支local_branch,本地分支与远程分支关联,已经切换到本地分支"></a>1.有远程分支remote_branch,有本地分支local_branch,本地分支与远程分支关联,已经切换到本地分支</h2><blockquote>
<p>git push</p>
</blockquote>
<h2 id="2-有远程分支remote-branch-有本地分支local-branch-本地分支与远程分支不关联-已经切换到本地分支"><a href="#2-有远程分支remote-branch-有本地分支local-branch-本地分支与远程分支不关联-已经切换到本地分支" class="headerlink" title="2.有远程分支remote_branch,有本地分支local_branch,本地分支与远程分支不关联,已经切换到本地分支"></a>2.有远程分支remote_branch,有本地分支local_branch,本地分支与远程分支不关联,已经切换到本地分支</h2><blockquote>
<p>git push -u origin/remote_branch</p>
</blockquote>
<h2 id="3-没有远程分支remote-branch-有本地分支local-branch-已经切换到本地分支"><a href="#3-没有远程分支remote-branch-有本地分支local-branch-已经切换到本地分支" class="headerlink" title="3.没有远程分支remote_branch,有本地分支local_branch,已经切换到本地分支"></a>3.没有远程分支remote_branch,有本地分支local_branch,已经切换到本地分支</h2><blockquote>
<p>git push origin local_branch :remote_branch</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git push</tag>
      </tags>
  </entry>
  <entry>
    <title>补码原码反码</title>
    <url>/2020/10/05/%E8%A1%A5%E7%A0%81%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81/</url>
    <content><![CDATA[<h1 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码 反码 补码"></a>原码 反码 补码</h1><ol>
<li>整数的原码，反码，补码都一样。</li>
<li>负数的反码=它的原码符号位不变，其他位取反（0-&gt;1,1-&gt;0）</li>
<li>负数的补码=它的反码+1</li>
<li>0的反码，补码都是0</li>
<li>在计算机运算的时候，都是以补码的方式来运算的</li>
</ol>
<p><strong>二进制的最高位是符号位：0表示正数，1表示负数</strong> </p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>约瑟夫环</title>
    <url>/2020/09/28/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="7-1-约瑟夫环（Josephus）问题-by-Yan-100分"><a href="#7-1-约瑟夫环（Josephus）问题-by-Yan-100分" class="headerlink" title="7-1 约瑟夫环（Josephus）问题(by Yan) (100分)"></a>7-1 约瑟夫环（Josephus）问题(by Yan) (100分)</h1><p>编号为1，2，…，n的n个人按顺时针方向围坐在一张圆桌周围，每人持有一个密码（正整数）。一开始任选一个正整数m作为报数上限值，从第一个人开始按顺时针方向自1开始报数，报到m时停止报数，报m的那个人出列，将他的密码作为新的m值，从他顺时针方向的下一个人开始重新从1报数，数到m的那个人又出列；如此下去，直至圆桌周围的人全部出列为止。要求按出列顺序输出n个人的编号。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>第一行输入两个整数，依次表示人数n和初始化密码m，以空格间隔。 第二行依次输入n个整数，分别表示n个人的密码，以空格间隔。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>按出列次序输出每个人的编号，以空格间隔。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><p>在这里给出一组输入。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 20</span><br><span class="line">3 1 7 2 4 8 4</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><p>在这里给出相应的输出。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 1 4 7 2 3 5</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mima;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span><span class="comment">//指针域，用于存储下一个节点的地址 </span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"><span class="comment">//**************************************</span></span><br><span class="line"> <span class="function">LinkList <span class="title">creat</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    LNode *s,*r;</span><br><span class="line">    LinkList H = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    H-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    H-&gt;num=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;H-&gt;mima);</span><br><span class="line">     r=H;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        s=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s-&gt;mima);</span><br><span class="line">        s-&gt;num= i;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r=s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = H;</span><br><span class="line">    H=r;</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*****************************************************/</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Find_LinkList</span><span class="params">(LinkList H,<span class="keyword">int</span>  m)</span></span>&#123;</span><br><span class="line">     LNode *p = H;</span><br><span class="line">     LNode *q;</span><br><span class="line">     <span class="keyword">while</span>(p-&gt;next!=p)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">          p=p-&gt;next;</span><br><span class="line">     q=p-&gt;next;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d "</span>,q-&gt;num);</span><br><span class="line">     p-&gt;next=q-&gt;next;</span><br><span class="line">     m=q-&gt;mima;</span><br><span class="line">     <span class="built_in">free</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;num);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/************************************************************/</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    LinkList H;</span><br><span class="line">    H = creat(n);</span><br><span class="line">    Find_LinkList(H,m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>系统的备份与还原</title>
    <url>/2020/06/03/%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar cvpzf centos7.tgz --exclude=/centos7.tgz --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/media /</span><br></pre></td></tr></table></figure>

<h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvpfz centos7.tgz -C /</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>标识符的注意事项</title>
    <url>/2020/10/04/%E6%A0%87%E8%AF%86%E7%AC%A6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="标识符命名注意事项"><a href="#标识符命名注意事项" class="headerlink" title="标识符命名注意事项"></a>标识符命名注意事项</h1><ul>
<li>包名与所在文件夹的名称保持一至。</li>
<li>变量名，函数名，常量名：采用驼峰法</li>
<li>如果变量名，函数名，常量名首字母<strong>大写</strong> ，则可以被其他的包访问；如果首字母小写，则只能在本包使用。</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>西邮学号宽带绑定</title>
    <url>/2020/09/13/%E8%A5%BF%E9%82%AE%E5%AD%A6%E5%8F%B7%E5%AE%BD%E5%B8%A6%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="绑定教程"><a href="#绑定教程" class="headerlink" title="绑定教程"></a>绑定教程</h1><p><strong>绑定流程</strong> </p>
<ol>
<li>自助服务系统绑定账号</li>
<li>安装上网客户端</li>
<li>使用学号密码登录网络确定绑定成功</li>
</ol>
<h2 id="一-绑定自助系统"><a href="#一-绑定自助系统" class="headerlink" title="一.绑定自助系统"></a>一.绑定自助系统</h2><ol>
<li>插上网线，使用浏览器打开任意网页，会自动跳转到通知页面：</li>
</ol>
<p><img src="https://i.loli.net/2020/09/13/h3rTtnN6OGImQ8H.png" alt="image.png"></p>
<ol start="2">
<li><p>点右侧的用户自助服务系统，打开校园网自助系统</p>
</li>
<li><p>在登录页面输入学号和对应的校园网密码（默认学号后6位），登录成功在服务，绑定运营商账号密码</p>
</li>
<li><p>在通知页面下载上网客户端</p>
</li>
<li><p>在客户端使用学号和一卡通充值密码登录（默认为学号后6位），如果有网证明绑定成功</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>逻辑运算符的注意事项与细节</title>
    <url>/2020/10/04/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E4%B8%8E%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<ol>
<li><code>&amp;&amp;</code> 也叫短路与，如果第一个条件为false,则第二个条件不会判断，最终结果为false。</li>
<li><code>||</code> 也叫短路或，如果第一个条件为true，则第二个条件不会判断，最终结果为true。</li>
</ol>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>韩信点兵-Python</title>
    <url>/2020/09/28/%E9%9F%A9%E4%BF%A1%E7%82%B9%E5%85%B5-Python/</url>
    <content><![CDATA[<h1 id="7-2-jmu-python-韩信点兵-10分"><a href="#7-2-jmu-python-韩信点兵-10分" class="headerlink" title="7-2 jmu-python-韩信点兵 (10分)"></a>7-2 jmu-python-韩信点兵 (10分)</h1><p>在中国数学史上，广泛流传着一个“韩信点兵”的故事：韩信是汉高祖刘邦手下的大将，他英勇善战，智谋超群，为汉朝建立了卓越的功劳。据说韩信的数学水平也非常高超，他在点兵的时候，为了知道有多少兵，同时又能保住军事机密，便让士兵排队报数：</p>
<p>按从1至5报数，记下最末一个士兵报的数为1； 再按从1至6报数，记下最末一个士兵报的数为5； 再按从1至7报数，记下最末一个士兵报的数为4； 最后按从1至11报数，最末一个士兵报的数为10； 请编写程序计算韩信至少有多少兵。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>无输入</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出韩信至少拥有的士兵人数。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无输入</span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出人数</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">1</span>) <span class="keyword">and</span> (i % <span class="number">6</span> == <span class="number">5</span>) <span class="keyword">and</span> (i % <span class="number">7</span> == <span class="number">4</span>) <span class="keyword">and</span> (i % <span class="number">11</span> == <span class="number">10</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>函数细节理解：</p>
<p><strong>range()</strong> </p>
<p>range()内建函数的一般格式为：</p>
<p><strong><em>range([start,]stop[,step])</em></strong> </p>
<p>range()函数有三个参数：start和step是可选的，start表示开始，默认值为0；end表示结束；step表示每次跳跃的间距，默认值为1。函数功能是生成一个从start参数的值开始，到end参数的值结束（但不包括end）的数字序列。</p>
<p>*<em>示例: *</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">   print(i)</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;0</span><br><span class="line">&gt;1</span><br><span class="line">&gt;2</span><br><span class="line">&gt;3</span><br><span class="line">&gt;4</span><br><span class="line">&gt;5</span><br><span class="line">&gt;6</span><br><span class="line">&gt;7</span><br><span class="line">&gt;8</span><br><span class="line">&gt;9</span><br></pre></td></tr></table></figure>

<p><strong>print()</strong> </p>
<p><strong>print()</strong> 方法用于打印输出，是python中最常见的一个函数。</p>
<p>该函数的语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;print(*objects, sep=<span class="string">' '</span>, end=<span class="string">'\n'</span>, file=sys.stdout)</span><br></pre></td></tr></table></figure>

<p>参数的具体含义如下：</p>
<p>objects –表示输出的对象。输出多个对象时，需要用 , （逗号）分隔。</p>
<p>sep – 用来间隔多个对象。</p>
<p>end – 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符。</p>
<p>file – 要写入的文件对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;print(<span class="number">1</span>)  <span class="comment">#数值类型可以直接输出</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;运行结果如下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;1</span></span><br><span class="line"><span class="string">&gt;'''</span></span><br><span class="line">&gt;print(<span class="string">"Hello World"</span>)  <span class="comment">#字符串类型可以直接输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;运行结果如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;Hello World</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;'''</span></span><br><span class="line">&gt;a=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt;b=<span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line">&gt;print(a, b)  <span class="comment">#可以一次输出多个对象，对象之间用逗号分隔</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="string">'''</span></span><br><span class="line"><span class="string">&gt;运行结果如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;1 Hello World</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;'''</span></span><br><span class="line">&gt;<span class="comment">#如果直接输出字符串，而不是用对象表示的话，可以不使用逗号</span></span><br><span class="line"></span><br><span class="line">&gt;print(<span class="string">"Duan"</span><span class="string">"Yixuan"</span>)</span><br><span class="line"></span><br><span class="line">&gt;print(<span class="string">"Duan"</span>,<span class="string">"Yixuan"</span>)</span><br><span class="line"></span><br><span class="line">&gt;<span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;运行结果如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;DuanYixuan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;Duan Yixuan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;可知，不添加逗号分隔符，字符串之间没有间隔</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;'''</span><span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;print("www", "snh48", "com", sep=".")  # 设置间隔符</span></span><br><span class="line"><span class="string">&gt;'</span><span class="string">''</span></span><br><span class="line">&gt;运行结果如下：</span><br><span class="line">&gt;www.snh48.com</span><br><span class="line"></span><br><span class="line">&gt;<span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h1 id="二、变量的输出"><a href="#二、变量的输出" class="headerlink" title="二、变量的输出"></a>二、变量的输出</h1><p>无论什么类型的数据，包括但不局限于：数值型，布尔型，列表变量，字典变量…都可以直接输出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">#例如：</span></span><br><span class="line">&gt;num = <span class="number">19</span></span><br><span class="line"></span><br><span class="line">&gt;print(num)    <span class="comment">#19  输出数值型变量</span></span><br><span class="line"></span><br><span class="line">&gt;str = <span class="string">'Duan Yixuan'</span></span><br><span class="line"></span><br><span class="line">&gt;print(str)  <span class="comment">#Duan Yixuan  输出字符串变量</span></span><br><span class="line"></span><br><span class="line">&gt;list = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">&gt;print(list)   <span class="comment">#[1, 2, 'a']  输出列表变量</span></span><br><span class="line"></span><br><span class="line">&gt;tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">&gt;print(tuple)    <span class="comment">#(1, 2, 'a') 输出元组变量</span></span><br><span class="line"></span><br><span class="line">&gt;dict = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt;print(dict)   <span class="comment"># &#123;'a': 1, 'b': 2&#125; 输出字典变量</span></span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>将博客搬至CSDN</title>
    <url>/2020/10/04/%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%87%B3CSDN/</url>
    <content><![CDATA[<p>将博客搬至CSDN</p>
]]></content>
  </entry>
  <entry>
    <title>go-数组的注意事项</title>
    <url>/2020/10/17/Go-%E6%95%B0%E7%BB%84%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol>
<li>go的数组属<strong>值类型</strong> ，在默认情况下是值传递，因此会进行值拷贝。数组间不会相互影响</li>
<li>如果想在其他数组里修改数组的值可以是指针来进行修改</li>
</ol>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>Go-函数</title>
    <url>/2020/10/10/Go-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>go-冒泡排序</title>
    <url>/2020/10/18/go-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*冒泡排序的规则</span><br><span class="line">1.一共会经过arr。lengrh-1次的轮数比较，每一轮会确定一个数的位置</span><br><span class="line">2.每一轮的比较次数在逐渐减少</span><br><span class="line">3.当发现前面的一个数比后面的一个数大的时候，就进行了交换</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>go-切片</title>
    <url>/2020/10/17/go-%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p><strong>基本语法</strong></p>
<p>var 切片名 []类型</p>
<ol>
<li>切片是引用类型</li>
</ol>
<p><strong>切片的使用</strong> </p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>数组复杂使用--数组反转</title>
    <url>/2020/10/17/%E6%95%B0%E7%BB%84%E5%A4%8D%E6%9D%82%E4%BD%BF%E7%94%A8-%E6%95%B0%E7%BB%84%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<h1 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用临时变量进行交换，最后一个和第一个进行交换，交换次数为数组长度的一半即len(intArr3)/2</span></span><br><span class="line">temp :=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(intArrr3)/<span class="number">2</span>;i++&#123;</span><br><span class="line">    temp=intArr3[<span class="built_in">len</span>(intArr3)<span class="number">-1</span>-i]</span><br><span class="line">    intArr3[<span class="built_in">len</span>(intArr3)<span class="number">-1</span>-i]=intArr3[i]</span><br><span class="line">    intArr3[i]=temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>矩阵的运算</title>
    <url>/2020/10/24/%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SMAX 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i,j;          <span class="comment">//储存非零元素的行和列信息</span></span><br><span class="line">    <span class="keyword">int</span>  v;            <span class="comment">//非零元素的值</span></span><br><span class="line">&#125; SPNode;       <span class="comment">//定义三元组类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> row,col,notZero; <span class="comment">//矩阵的行、列和非零元素的个数</span></span><br><span class="line">    SPNode data[SMAX]; <span class="comment">//三元组表</span></span><br><span class="line">&#125; SPMatrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">(SPMatrix m)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SPMatrix <span class="title">createMatrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"enter row and col and notZero"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> row,col, notZero;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;row &gt;&gt;col &gt;&gt;notZero;</span><br><span class="line">    SPMatrix matrix;</span><br><span class="line">    matrix.row = row;</span><br><span class="line">    matrix.col = col;</span><br><span class="line">    matrix.notZero = notZero;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= notZero; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"enter each row and col and value"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; matrix.data[k].i &gt;&gt;matrix.data[k].j&gt;&gt;matrix.data[k].v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"三元组："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= notZero; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"(("</span>&lt;&lt;matrix.data[k].i&lt;&lt;<span class="string">","</span> &lt;&lt; matrix.data[k].j&lt;&lt;<span class="string">")"</span>&lt;&lt;matrix.data[k].v&lt;&lt;<span class="string">"))"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    printMatrix(matrix);</span></span><br><span class="line">    <span class="keyword">return</span> matrix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">(SPMatrix m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> row = m.row;</span><br><span class="line">    <span class="keyword">int</span> col = m.col;</span><br><span class="line">    <span class="keyword">int</span> show[row][col]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            show[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=m.notZero; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        show[m.data[k].i<span class="number">-1</span>][m.data[k].j<span class="number">-1</span>] = m.data[k].v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;show[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SPMatrix <span class="title">add</span><span class="params">(SPMatrix m1,SPMatrix m2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m1.row!=m2.row || m1.col!=m2.col)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"wrong"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> m1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num = m1.notZero;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= num; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(m = <span class="number">1</span>; m &lt;= m2.notZero; m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(m1.data[k].i == m2.data[m].i &amp;&amp; m1.data[k].j == m2.data[m].j)</span><br><span class="line">            &#123;</span><br><span class="line">                m2.data[k].v += m1.data[m].v;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag ==<span class="number">0</span>) <span class="comment">//当前位置m2和m1未重合</span></span><br><span class="line">        &#123;</span><br><span class="line">            m2.notZero++;</span><br><span class="line">            m2.data[m2.notZero] = m1.data[k];</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SPMatrix <span class="title">sub</span><span class="params">(SPMatrix m1,SPMatrix m2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m1.row!=m2.row || m1.col!=m2.col)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"wrong"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> m1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num = m1.notZero;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= num; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(m = <span class="number">1</span>; m &lt;= m2.notZero; m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(m1.data[k].i == m2.data[m].i &amp;&amp; m1.data[k].j == m2.data[m].j)</span><br><span class="line">            &#123;</span><br><span class="line">                m2.data[k].v -= m1.data[m].v;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag ==<span class="number">0</span>) <span class="comment">//当前位置m2和m1未重合</span></span><br><span class="line">        &#123;</span><br><span class="line">            m2.notZero++;</span><br><span class="line">            m2.data[m2.notZero] = m1.data[k];</span><br><span class="line">            m2.data[m2.notZero].v = -m1.data[k].v;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SPMatrix <span class="title">numMul</span><span class="params">(SPMatrix m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"输入数乘的数："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= num; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        m.data[k].v *= num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isExist</span><span class="params">(SPMatrix m,SPNode a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m.notZero;i++)</span><br><span class="line">        <span class="keyword">if</span>(m.data[i].i == a.i &amp;&amp;m.data[i].j == a.j)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SPMatrix <span class="title">Mul</span><span class="params">(SPMatrix m1,SPMatrix m2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m1.col != m2.row)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"wrong"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> m1;</span><br><span class="line">    &#125;</span><br><span class="line">    SPMatrix result;</span><br><span class="line">    result.row = m1.row;</span><br><span class="line">    result.col = m2.col;</span><br><span class="line">    result.notZero = <span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line">    SPNode data[m1.notZero+m2.notZero];</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m1.notZero; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">1</span>; m &lt;= m2.notZero; m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(m1.data[k].j == m2.data[m].i)</span><br><span class="line">            &#123;</span><br><span class="line">                data[n].v = m1.data[k].v*m2.data[m].v;</span><br><span class="line">                data[n].i = m1.data[k].i;</span><br><span class="line">                data[n].j = m2.data[m].j;</span><br><span class="line">                n++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k =<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line"></span><br><span class="line">        flag = isExist(result,data[k]);</span><br><span class="line">        <span class="keyword">if</span>(flag&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result.data[flag].v+=data[k].v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result.notZero++;</span><br><span class="line">            result.data[result.notZero] = data[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"***********************************\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"*              菜单                *\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"*          1.矩阵相加               *\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"*          2.矩阵相减               *\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"*          3.矩阵相乘               *\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"*          4.矩阵数乘               *\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"*          6.退出                  *\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"***********************************\n"</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span> == num|| <span class="number">2</span> == num || <span class="number">3</span> == num)</span><br><span class="line">        &#123;</span><br><span class="line">            SPMatrix m1 = createMatrix();</span><br><span class="line">            SPMatrix m2 = createMatrix();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"两矩阵为"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            printMatrix(m1);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            printMatrix(m2);</span><br><span class="line">            <span class="keyword">switch</span>(num)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m1.col!=m2.col || m1.row!=m2.row)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"行列不同"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"结果为："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    printMatrix(add(m1,m2));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(m1.col!=m2.col || m1.row!=m2.row)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"参数错误"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"结果为："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    printMatrix(sub(m1,m2));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m1.col!=m2.row)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"参数错误"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"结果为："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    printMatrix(Mul(m1,m2));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">4</span> == num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入矩阵"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            SPMatrix m  = createMatrix();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入数值"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;number;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"矩阵为："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            printMatrix(m);</span><br><span class="line">            printMatrix(numMul(m));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"按回车继续...."</span>;</span><br><span class="line">        getchar();</span><br><span class="line">        getchar();</span><br><span class="line">        system(<span class="string">"cls"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span> == num|| <span class="number">2</span> == num || <span class="number">3</span> == num ||<span class="number">4</span> == num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>map</title>
    <url>/2020/10/24/map/</url>
    <content><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h2 id="map-的基本介绍"><a href="#map-的基本介绍" class="headerlink" title="map 的基本介绍"></a>map 的基本介绍</h2><p><code>var map变量名 map[keeytype]valuetype</code></p>
<p>keytype 不可以是<code>slice map function</code> ，因为不可以用<code>==</code>进行判断</p>
<p><code>make用来分配空间</code></p>
<p><strong>注意</strong></p>
<ol>
<li>使用前需要使用make对map进行空间的分配</li>
<li>map的key是不可以重复的</li>
</ol>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>方法</title>
    <url>/2020/10/26/%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="方法的声明与调用"><a href="#方法的声明与调用" class="headerlink" title="方法的声明与调用"></a>方法的声明与调用</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span>&#123;</span><br><span class="line">    Num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a A)</span><span class="title">test</span><span class="params">()</span></span>&#123;&#125;表示A结构体有一种方法 </span><br><span class="line"><span class="comment">//给A联系绑定一个方法</span></span><br></pre></td></tr></table></figure>

<p><strong>参数传递是值传递，是值拷贝，不是传递地址因此在方法对传递的参数进行修改不会对主函数里的值产生改变</strong></p>
<h2 id="方法快速入门"><a href="#方法快速入门" class="headerlink" title="方法快速入门"></a>方法快速入门</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(p，Name<span class="string">"是一个好人"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">sumadd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    res:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++&#123;</span><br><span class="line">        res+=i</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"%d"</span>,res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">sumadd2</span><span class="params">(n <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">	 res:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;=n;i++&#123;</span><br><span class="line">        res+=i</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"%d"</span>,res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span> , n2  <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法的调用与传参机制原理"><a href="#方法的调用与传参机制原理" class="headerlink" title="方法的调用与传参机制原理"></a>方法的调用与传参机制原理</h2>]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>python-format函数格式化</title>
    <url>/2020/11/05/python-format%E5%87%BD%E6%95%B0%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>接口的应用</title>
    <url>/2020/11/07/%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="接口的最佳实践"><a href="#接口的最佳实践" class="headerlink" title="接口的最佳实践"></a>接口的最佳实践</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> intSlice = []<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">90</span>&#125;</span><br><span class="line">    <span class="comment">//切片是引用类型</span></span><br><span class="line">    sort.Ints(intSlice)</span><br><span class="line">    fmt.Println(intSlice)</span><br><span class="line">    <span class="comment">//对结构体切片进行排序</span></span><br><span class="line">    <span class="comment">//sort.Sort</span></span><br><span class="line">    <span class="comment">//func Sort(data Interface)</span></span><br><span class="line">     	jhgfghjkjh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>接口</title>
    <url>/2020/10/31/%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span>&#123;</span><br><span class="line">    Start()</span><br><span class="line">    Stop()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span><span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span><span class="title">Stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Camera <span class="keyword">struct</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Camea)</span> <span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Camera)</span> <span class="title">Stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Competer <span class="keyword">struct</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(com Competer)</span><span class="title">Com</span><span class="params">(usb Usb)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mian</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    c:=Phone&#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> 接口名 <span class="keyword">interface</span>&#123;</span><br><span class="line">    method1(参数列表) 返回值列表</span><br><span class="line">    method2(参数列表) 返回值列表</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>小结说明</strong> </p>
<ol>
<li>接口里的所有方法都没有方法体，即接口的方法都市没有实现的方法。</li>
<li>go中的接口不需要显式的实现。只要一个变量，含有接口类型中的所有方法，那么这个变量就实现这个接口。</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>线性表</title>
    <url>/2020/11/07/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>结构体</title>
    <url>/2020/10/25/%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">type</span> 结构体变量名 <span class="keyword">struct</span> &#123;</span><br><span class="line">    (变量名) (变量类型) </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结构体里的变量不赋值的情况下为默认值</span></span><br></pre></td></tr></table></figure>

<p><strong>结构体的使用</strong></p>
<p><em>1.创建结构体</em> </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span>  Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    <span class="keyword">var</span> Tom Person</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    <span class="keyword">var</span> Tom := Person&#123;对变量进行赋值&#125;</span><br><span class="line">    <span class="comment">//方法三</span></span><br><span class="line">    <span class="keyword">var</span> Tom *Person = <span class="built_in">new</span>(Person)</span><br><span class="line">    <span class="comment">//Tom是一个指针</span></span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    (*Tom).Name = <span class="string">"smith"</span> <span class="comment">//&#123;(*Tom).Name = "smith" &#125; == &#123;Tom.Name = "smith"&#125; </span></span><br><span class="line">    (*Tom),Age = <span class="number">10</span></span><br><span class="line">    <span class="comment">//重复赋值会对原有的值进行覆盖</span></span><br><span class="line">    <span class="comment">//方法四</span></span><br><span class="line">    <span class="keyword">var</span> person *Person = &amp;Person&#123;可以在创建的时候对结构体进行赋初始值&#125;</span><br><span class="line">    <span class="comment">//标准赋值 (*person),Name = "ss"</span></span><br><span class="line">    <span class="comment">//person.Name = "hello"</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>方法3和方法4 返回的是结构体指针</li>
<li>结构体指针的标准形式应该是：<code>(*结构体指针).字段名</code>  </li>
</ol>
<p><strong><code>.</code> 的运算级比   <code>*</code>  高</strong>  </p>
<p> <strong>结构体的内存分配</strong> </p>
<p>结构体里的字段的地址是连续的</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>题解</title>
    <url>/2020/12/15/%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个不小于 100 且小于 1000，同时包括小数点后一位的一个浮点数，例如123.4，要求把这个数字翻转过来，变成4.321并输出。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>无</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>无</p>
<h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p><strong>输入 #1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123.4</span><br></pre></td></tr></table></figure>

<p><strong>输出 #1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4.321</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a,b,c,d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c%c%c.%c"</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c.%c%c%c\n"</span>,d,c,b,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个正整数 n(n\le 100)<em>n</em>(<em>n</em>≤100)，然后对这个数字一直进行下面的操作：如果这个数字是奇数，那么将其乘 3 再加 1，否则除以 2。经过若干次循环后，最终都会回到 1。经过验证很大的数字（7\times10^{11}7×1011）都可以按照这样的方式比变成 1，所以被称为“冰雹猜想”。例如当 n<em>n</em> 是 20，变化的过程是 [20, 10, 5, 16, 8, 4, 2, 1]。</p>
<p>根据给定的数字，验证这个猜想，并从最后的 1 开始，倒序输出整个变化序列。</p>
<h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>无</p>
<h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>无</p>
<h2 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p><strong>输入 #1</strong>复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure>

<p><strong>输出 #1</strong>复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 4 8 16 5 10 20</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">print</span>[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> n, count = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">print</span>[count] = n;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span> &amp;&amp; n &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (; n != <span class="number">1</span>;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                sum = n * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">                n = n * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">print</span>[count] = sum;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                sum = n / <span class="number">2</span>;</span><br><span class="line">                n = n / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">print</span>[count] = sum;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = count - <span class="number">1</span>; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, <span class="built_in">print</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="built_in">print</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>一般的文本编辑器都有查找单词的功能，该功能可以快速定位特定单词在文章中的位置，有的还能统计出特定单词在文章中出现的次数。</p>
<p>现在，请你编程实现这一功能，具体要求是：给定一个单词，请你输出它在给定的文章中出现的次数和第一次出现的位置。注意：匹配单词时，不区分大小写，但要求完全匹配，即给定单词必须与文章中的某一独立单词在不区分大小写的情况下完全相同（参见样例1 ），如果给定单词仅是文章中某一单词的一部分则不算匹配（参见样例2 ）。</p>
<h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>共22行。</p>
<p>第11行为一个字符串，其中只含字母，表示给定单词；</p>
<p>第22行为一个字符串，其中只可能包含字母和空格，表示给定的文章。</p>
<h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，如果在文章中找到给定单词则输出两个整数，两个整数之间用一个空格隔开，分别是单词在文章中出现的次数和第一次出现的位置（即在文章中第一次出现时，单词首字母在文章中的位置，位置从00 开始）；如果单词在文章中没有出现，则直接输出一个整数-1−1。</p>
<h2 id="输入输出样例-2"><a href="#输入输出样例-2" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p><strong>输入 #1</strong>复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">To</span><br><span class="line">to be or not to be is a question</span><br></pre></td></tr></table></figure>

<p><strong>输出 #1</strong>复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 0</span><br></pre></td></tr></table></figure>

<p><strong>输入 #2</strong>复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">to</span><br><span class="line">Did the Ottoman Empire lose its power at that time</span><br></pre></td></tr></table></figure>

<p><strong>输出 #2</strong>复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure>

<h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>数据范围</p>
<p>1≤1≤单词长度≤10≤10。</p>
<p>1≤1≤文章长度≤1,000,000≤1,000,000。</p>
<p>noip2011普及组第2题</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">11</span>], b[<span class="number">1000001</span>];</span><br><span class="line">    gets(a);</span><br><span class="line">    gets(b);</span><br><span class="line">    <span class="built_in">strcat</span>(a, <span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(b, <span class="string">" "</span>);<span class="comment">//在ab后各加一个" "，减小配对的难度</span></span><br><span class="line">    <span class="keyword">int</span> i, s, n = <span class="number">0</span>, l, j, ss = <span class="number">0</span>, k, rec;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; a[i] != <span class="string">'\0'</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt;= <span class="string">'a'</span>)</span><br><span class="line">            a[i] -= <span class="string">'a'</span> - <span class="string">'A'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; b[i] != <span class="string">'\0'</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] &gt;= <span class="string">'a'</span>)</span><br><span class="line">            b[i] -= <span class="string">'a'</span> - <span class="string">'A'</span>;</span><br><span class="line">    &#125; <span class="comment">//统一ab的大小写</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; b[i] != <span class="string">'\0'</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i] == <span class="string">' '</span>) &#123;</span><br><span class="line">            s = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = n, k = <span class="number">0</span>; j &lt;= i, a[k] != <span class="string">'\0'</span>; j++, k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (b[j] == a[k]) &#123;</span><br><span class="line">                    s *= <span class="number">1</span>;<span class="comment">//用s来记录各个位能否对应，如果结果是1就正确，一位不对s就变成0</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    s *= <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="number">1</span>) &#123;</span><br><span class="line">                ss++; <span class="comment">//如果每次都对就增加符合的次数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ss == <span class="number">1</span> &amp;&amp; s == <span class="number">1</span>) &#123;</span><br><span class="line">                rec = n; <span class="comment">//记录第一次符合的位数</span></span><br><span class="line">            &#125;</span><br><span class="line">            n = i;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ss == <span class="number">0</span>) &#123;</span><br><span class="line">        ss = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, ss);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ss &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, ss, rec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2020/10/31/%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="继承的好处"><a href="#继承的好处" class="headerlink" title="继承的好处"></a>继承的好处</h2><p>继承可以减少代码的复用</p>
<p>当多个结构体存在相同的属性(字段)和方法是，可以从这些结构体中抽象出结构体，在该结构体中定义这些相同的属性和方法。</p>
<p>其他的结构体不需要重新定义这些属性（字段）和方法，只需要嵌套一个匿名结构体即可</p>
<p><strong>在go中如果一个结构体嵌套了另一个匿名结构体，那么这个结构体可以直接访问匿名结构体的字段和方法，从而实现了继承特性</strong> </p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Goods <span class="keyword">struct</span>&#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span>&#123;</span><br><span class="line">    Goods <span class="comment">//嵌套匿名结构体Goods</span></span><br><span class="line">    Writer <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>python复习</title>
    <url>/2021/01/02/python%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="python输入输出"><a href="#python输入输出" class="headerlink" title="python输入输出"></a>python输入输出</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><h3 id="单输入"><a href="#单输入" class="headerlink" title="单输入"></a>单输入</h3><p><code>input(&quot;&quot;)</code>默认为字符串，可以使用强制转换为为需要的类型</p>
<p><code>eval()</code>可以将<code>&quot; &quot; &#39; &#39;</code>中的数组最短转化为整型<code>int</code></p>
<h3 id="多输入int"><a href="#多输入int" class="headerlink" title="多输入int"></a>多输入int</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b,c=input(<span class="string">'三个字符串:'</span>).split(<span class="string">','</span>)</span><br><span class="line">a,b,c=input(<span class="string">'三个字符串:'</span>).split()</span><br><span class="line">a,b,c=eval(input(<span class="string">'三个数字:'</span>))</span><br><span class="line">a,b,c=map(eval,input(<span class="string">'三个数字:'</span>).split())<span class="comment">#a，b,c接收的是int</span></span><br></pre></td></tr></table></figure>



<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>1.<code>format</code></p>
<p><code>print(&quot;{}&quot;.format(a),end=&quot;&quot;)</code></p>
<p><code>print(&quot;{:.2f}&quot;.fomat(a),end=&quot; &quot;)</code></p>
<p>2.<code>print(&quot;%.2d&quot;%da)</code>   <code>print(&quot;%.2d%.2d&quot;%(a,b))</code></p>
<p><code>print(&quot;&quot;)</code>默认换行，加<code>end=&quot;参数&quot;</code>可以改变默认换行</p>
<h3 id="去掉列表中的"><a href="#去掉列表中的" class="headerlink" title="去掉列表中的[]"></a>去掉列表中的<code>[]</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例一</span></span><br><span class="line">list = eval(input(<span class="string">""</span>))</span><br><span class="line">list1 = []<span class="comment">#初始化一个空列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> list1:</span><br><span class="line">        list1.append(i)</span><br><span class="line">print(*list1)<span class="comment">#*将列表进行拆解</span></span><br><span class="line"><span class="comment">#例二</span></span><br><span class="line">nums1=list(input().split())</span><br><span class="line">nums2=list(input().split())</span><br><span class="line">out=[]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> nums1:</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> nums2 <span class="keyword">and</span> x <span class="keyword">not</span> <span class="keyword">in</span> out:</span><br><span class="line">        out.append(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> nums2:</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> nums1 <span class="keyword">and</span> x <span class="keyword">not</span> <span class="keyword">in</span> out:  </span><br><span class="line">        out.append(x)   </span><br><span class="line">print(<span class="string">' '</span>.join(out))<span class="comment">#使用字符串连接函数</span></span><br><span class="line"><span class="comment">#字符串连接函数是将列表，元组中的元素一指定的字符(分隔符)连接起来生成一个新的字符</span></span><br><span class="line"><span class="comment">#串,使用join()方法实现,其一般形式为</span></span><br><span class="line"><span class="comment">#sep.join(sequence)</span></span><br><span class="line"><span class="comment">#其中，sep表示分隔符，可以为空;sequence是要连接的元素序列。功能是以sep作为分隔</span></span><br><span class="line"><span class="comment">#符，将sequence所有的元素合并成一个新的字符串斌返回该字符串</span></span><br><span class="line"><span class="comment">#例</span></span><br><span class="line">s4=[<span class="string">"beijing"</span>,<span class="string">"xian"</span>,<span class="string">"tianjin"</span>,<span class="string">"chongqing"</span>]</span><br><span class="line">sep=<span class="string">"--&gt;"</span></span><br><span class="line">str=sep.join(s4)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>交通咨询</title>
    <url>/2021/01/03/%E4%BA%A4%E9%80%9A%E5%92%A8%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by dingchunhui on 2020/12/30.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVEX 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY 32768</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> No;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125; Vextype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> arcs[MAXVEX][MAXVEX];</span><br><span class="line">    Vextype vex[MAXVEX];</span><br><span class="line">    <span class="keyword">int</span> vexnum;</span><br><span class="line">    <span class="keyword">int</span> arcnum;</span><br><span class="line">&#125; AdjMatrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate</span><span class="params">(AdjMatrix *G, <span class="keyword">char</span> name[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(name, G-&gt;vex[i].name))</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MapFileWrite</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(<span class="string">"map.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The file can not be opened.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The file now be opened.\n"</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"%5d%5d"</span>, G-&gt;vexnum, G-&gt;arcnum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(fp, <span class="string">"%10s"</span>, G-&gt;vex[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= G-&gt;vexnum; j++) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(fp, <span class="string">"%10d"</span>, G-&gt;arcs[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fclose(fp) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"File can not be closed.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"File is now closed.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MapFileRead</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(<span class="string">"map.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The file can not be opened.\n"</span>);</span><br><span class="line">        <span class="comment">// exit(1);</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fscanf</span>(fp, <span class="string">"%5d%5d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line">            <span class="built_in">fscanf</span>(fp, <span class="string">"%10s"</span>, G-&gt;vex[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= G-&gt;vexnum; j++) &#123;</span><br><span class="line">                <span class="built_in">fscanf</span>(fp, <span class="string">"%10d"</span>, &amp;G-&gt;arcs[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fclose(fp) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"File can not be closed.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"File is now closed.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Create</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, weight;</span><br><span class="line">    <span class="keyword">char</span> city[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入交通图中的城市数和路线数:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;vexnum, &amp;G-&gt;arcnum);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= G-&gt;vexnum; j++)</span><br><span class="line">            G-&gt;arcs[i][j] = INFINITY;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入交通图中的%d个城市及城市名:\n"</span>, G-&gt;vexnum);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No.%d个城市:"</span>, i);</span><br><span class="line">        G-&gt;vex[i].No = i;</span><br><span class="line">        _flushall();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, G-&gt;vex[i].name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入交通图中的%d条路线:\n"</span>, G-&gt;arcnum);</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= G-&gt;arcnum; k++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No.%d条路线:"</span>, k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n起点城市:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">        i = Locate(G, city);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"终点城市:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">        j = Locate(G, city);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"公里数:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;weight);</span><br><span class="line">        G-&gt;arcs[i][j] = weight;</span><br><span class="line">        G-&gt;arcs[j][i] = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    MapFileWrite(G);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n城市交通情况为:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= G-&gt;vexnum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (G-&gt;arcs[i][j] != INFINITY)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s&lt;--&gt;%s:%6dkm\n"</span>, G-&gt;vex[i].name, G-&gt;vex[j].name, G-&gt;arcs[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Serach</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">char</span> city[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> No, i, j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入查询的城市:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    No = Locate(G, city);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"该城市的交通情况为:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++)</span><br><span class="line">        <span class="keyword">if</span> (i == No)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= G-&gt;vexnum; j++)</span><br><span class="line">                <span class="keyword">if</span> (G-&gt;arcs[i][j] != INFINITY)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%s---%s:%dkm\n"</span>, G-&gt;vex[No].name, G-&gt;vex[j].name, G-&gt;arcs[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">char</span> city[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>, weight;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入增加路线的起点城市:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    start = Locate(G, city);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"终点城市:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    <span class="built_in">end</span> = Locate(G, city);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"距离:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;weight);</span><br><span class="line">    G-&gt;arcs[start][<span class="built_in">end</span>] = weight;</span><br><span class="line">    G-&gt;arcs[<span class="built_in">end</span>][start] = weight;</span><br><span class="line">    MapFileWrite(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">char</span> city[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入撤销路线的起点城市:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    start = Locate(G, city);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"终点城市:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    <span class="built_in">end</span> = Locate(G, city);</span><br><span class="line">    G-&gt;arcs[start][<span class="built_in">end</span>] = INFINITY;</span><br><span class="line">    G-&gt;arcs[<span class="built_in">end</span>][start] = INFINITY;</span><br><span class="line">    MapFileWrite(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> dist[], <span class="keyword">int</span> path[][MAXVEX])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mindist, i, j, k, t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line">        dist[i] = G-&gt;arcs[start][i];</span><br><span class="line">        <span class="keyword">if</span> (G-&gt;arcs[start][i] != INFINITY)</span><br><span class="line">            path[i][<span class="number">1</span>] = start;</span><br><span class="line">    &#125;</span><br><span class="line">    path[start][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line">        mindist = INFINITY;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= G-&gt;vexnum; j++)</span><br><span class="line">            <span class="keyword">if</span> (!path[j][<span class="number">0</span>] &amp;&amp; dist[j] &lt; mindist) &#123;</span><br><span class="line">                k = j;</span><br><span class="line">                mindist = dist[j];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (mindist == INFINITY) <span class="keyword">break</span>;</span><br><span class="line">        path[k][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= G-&gt;vexnum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!path[j][<span class="number">0</span>] &amp;&amp; G-&gt;arcs[k][j] &lt; INFINITY &amp;&amp; dist[k] + G-&gt;arcs[k][j] &lt; dist[j]) &#123;</span><br><span class="line">                dist[j] = dist[k] + G-&gt;arcs[k][j];</span><br><span class="line">                t = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (path[k][t] != <span class="number">0</span>) &#123;</span><br><span class="line">                    path[j][t] = path[k][t];</span><br><span class="line">                    t++;</span><br><span class="line">                &#125;</span><br><span class="line">                path[j][t] = k;</span><br><span class="line">                path[j][t + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++)</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="built_in">end</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s---&gt;%s的最短路线为：从%s"</span>, G-&gt;vex[start].name, G-&gt;vex[<span class="built_in">end</span>].name, G-&gt;vex[start].name);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">2</span>; path[i][j] != <span class="number">0</span>; j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-&gt;%s"</span>, G-&gt;vex[path[i][j]].name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-&gt;%s，距离为%dkm\n"</span>, G-&gt;vex[<span class="built_in">end</span>].name, dist[i]);</span><br><span class="line">&#125;<span class="comment">//寻找最短路线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shortcut</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">char</span> city[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>;</span><br><span class="line">    <span class="keyword">int</span> dist[MAXVEX], path[MAXVEX][MAXVEX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入起点城市："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    start = Locate(G, city);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入终点城市："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    <span class="built_in">end</span> = Locate(G, city);</span><br><span class="line">    Dijkstra(G, start, <span class="built_in">end</span>, dist, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> adjvex;</span><br><span class="line">        <span class="keyword">int</span> lowcost;</span><br><span class="line">    &#125; closedge[MAXVEX];</span><br><span class="line">    <span class="keyword">int</span> i, e, k, m, <span class="built_in">min</span>;</span><br><span class="line">    closedge[start].lowcost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++)</span><br><span class="line">        <span class="keyword">if</span> (i != start) &#123;</span><br><span class="line">            closedge[i].adjvex = start;</span><br><span class="line">            closedge[i].lowcost = G-&gt;arcs[start][i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (e = <span class="number">1</span>; e &lt;= G-&gt;vexnum - <span class="number">1</span>; e++) &#123;</span><br><span class="line">        <span class="comment">//选择最小权值的边</span></span><br><span class="line">        <span class="built_in">min</span> = INFINITY;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= G-&gt;vexnum; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (closedge[k].lowcost != <span class="number">0</span> &amp;&amp; closedge[k].lowcost &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">                m = k;</span><br><span class="line">                <span class="built_in">min</span> = closedge[k].lowcost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"从%s--%s:%dkm\n"</span>, G-&gt;vex[closedge[m].adjvex].name, G-&gt;vex[m].name, closedge[m].lowcost);</span><br><span class="line">        closedge[m].lowcost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++)</span><br><span class="line">            <span class="keyword">if</span> (i != m &amp;&amp; G-&gt;arcs[m][i] &lt; closedge[i].lowcost)</span><br><span class="line">                <span class="comment">//一旦发现有更小的权值边出现，则替换原有信息</span></span><br><span class="line">            &#123;</span><br><span class="line">                closedge[i].lowcost = G-&gt;arcs[m][i];</span><br><span class="line">                closedge[i].adjvex = m;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询从某个城市的最短连通路线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MiniSpanTree</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">char</span> city[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入起点城市："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    start = Locate(G, city);</span><br><span class="line">    Prim(G, start</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AdjMatrix G;</span><br><span class="line">    <span class="keyword">int</span> choice;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n\n*****城市交通情况查询系统*****"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n1.显示基本信息；"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n2.查询某个城市交通路线基本情况；"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n3.添加新路线；"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n4.撤销旧路线；"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n5.最短路线；"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n6.最少花费:"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n7.初始化:"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n0.退出"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n\n请输入选择："</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice);</span><br><span class="line">        <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                Display(&amp;G);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123; ;</span><br><span class="line">                Serach(&amp;G);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123; ;</span><br><span class="line">                Add(&amp;G);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">                Del(&amp;G);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: &#123;</span><br><span class="line">                Shortcut(&amp;G);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: &#123;</span><br><span class="line">                MiniSpanTree(&amp;G);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>: &#123;</span><br><span class="line">                Create(&amp;G);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>交通咨询系统</title>
    <url>/2021/01/03/%E4%BA%A4%E9%80%9A%E5%92%A8%E8%AF%A2%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="交通咨询系统"><a href="#交通咨询系统" class="headerlink" title="交通咨询系统"></a>交通咨询系统</h1><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"menu.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Menu();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="map-h"><a href="#map-h" class="headerlink" title="map.h"></a>map.h</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by dingchunhui on 2020/12/28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> C_DEMO_MAP_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C_DEMO_MAP_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"global.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Creat</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找城市与数组下标对应关系</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate</span><span class="params">(AdjMatrix *G, <span class="keyword">char</span> city[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加路线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddWay</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除路线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delway</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加城市</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CityAdd</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除城市</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CityDel</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列操作函数</span></span><br><span class="line"><span class="comment">//初始化队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(CSeQueue *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InSeQueue</span><span class="params">(CSeQueue *q, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OutSeQueue</span><span class="params">(CSeQueue *q, <span class="keyword">int</span> *x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判空队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EmptySeQueuue</span><span class="params">(CSeQueue *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//广度搜索</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTravel</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Seek</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最短路径Djkstra</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Djkstra</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> dist[], <span class="keyword">int</span> path[][MAXVEX])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortWay</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CityTimeTable</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MapFileWrite</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MapFileRead</span><span class="params">(AdjMatrix *G)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员登录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Login</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">SlowList <span class="title">CreatList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//C_DEMO_MAP_H</span></span></span><br></pre></td></tr></table></figure>

<h2 id="map-c"><a href="#map-c" class="headerlink" title="map.c"></a>map.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by dingchunhui on 2020/12/28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"map.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化无向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Creat</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> city1[<span class="number">21</span>], city2[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">int</span> way, n, m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入交通图中的[城市数]与[路线数】[两个城市只有一条路线]\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;G-&gt;citynum, &amp;G-&gt;waynum);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= G-&gt;citynum; j++) &#123;</span><br><span class="line">            G-&gt;way[i][j] = INFINITY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入交通图中的%d个城市\n"</span>, G-&gt;citynum);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第%d个城市\n"</span>, i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, G-&gt;city[i].name);</span><br><span class="line">        _flushall();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;waynum; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入两个城市间的路线【两个城市只有一条路线】:\n"</span>);</span><br><span class="line">        WAY:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"起点城市:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"终点城市:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city2);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(city1, city2) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"输入错误,起点城市和终点城市相同【逻辑错误】!请重新输入!!\n"</span>);</span><br><span class="line">            <span class="keyword">goto</span> WAY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"公里数:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;way);</span><br><span class="line">        n = Locate(G, city1);</span><br><span class="line">        m = Locate(G, city2);</span><br><span class="line">        G-&gt;way[n][m] = way;</span><br><span class="line">        G-&gt;way[m][n] = way;</span><br><span class="line">    &#125;</span><br><span class="line">    MapFileWrite(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定位函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate</span><span class="params">(AdjMatrix *G, <span class="keyword">char</span> city[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(G-&gt;city[i].name, city)) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CityAdd</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要添加的城市名称:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, G-&gt;city[G-&gt;citynum + <span class="number">1</span>].name);</span><br><span class="line">    G-&gt;citynum = G-&gt;citynum + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">        G-&gt;way[i][G-&gt;citynum] = INFINITY;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= G-&gt;citynum; j++) &#123;</span><br><span class="line">            G-&gt;way[G-&gt;citynum][j] = INFINITY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MapFileWrite(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CityDel</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">int</span> No;</span><br><span class="line">    <span class="keyword">char</span> city[<span class="number">21</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要删除的城市名称:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    No = Locate(G, city);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">        G-&gt;way[i][G-&gt;citynum] = INFINITY;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= G-&gt;citynum; j++) &#123;</span><br><span class="line">            G-&gt;way[G-&gt;citynum][j] = INFINITY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;citynum = G-&gt;citynum - <span class="number">1</span>;</span><br><span class="line">    MapFileWrite(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(CSeQueue *q)</span> </span>&#123;</span><br><span class="line">    q-&gt;front = <span class="number">0</span>;</span><br><span class="line">    q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> True;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InSeQueue</span><span class="params">(CSeQueue *q, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % MaxSize == q-&gt;front) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队满\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> False;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">        q-&gt;elem[q-&gt;rear] = x;</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OutSeQueue</span><span class="params">(CSeQueue *q, <span class="keyword">int</span> *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;front == q-&gt;rear) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队空\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> False;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">        *x = q-&gt;elem[q-&gt;front];</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判队空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EmptySeQueuue</span><span class="params">(CSeQueue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;front == q-&gt;rear) &#123;</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> False;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Seek</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>;</span><br><span class="line">    <span class="keyword">char</span> city1[<span class="number">21</span>], city2[<span class="number">21</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入起点城市名称:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,city1);</span><br><span class="line">    start = Locate(G,city1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入终点城市名称:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city2);</span><br><span class="line">    <span class="built_in">end</span> = Locate(G, city2);</span><br><span class="line">    BFS(G, start, <span class="built_in">end</span>);</span><br><span class="line"><span class="comment">//    BFSTravel(G);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTravel</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= G-&gt;citynum; v++) &#123;</span><br><span class="line">        visited[v] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= G-&gt;citynum; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[v])</span><br><span class="line">            BFS(G, v, G-&gt;citynum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">    SlowList H;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">int</span> x, slow;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">        visited[start] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s "</span>, G-&gt;city[start].name);</span><br><span class="line">    visited[start] = <span class="number">1</span>;</span><br><span class="line">    CSeQueue Q;</span><br><span class="line">    InitQueue(&amp;Q);</span><br><span class="line">    InSeQueue(&amp;Q, start);</span><br><span class="line">    <span class="keyword">while</span> (!EmptySeQueuue(&amp;Q)) &#123;</span><br><span class="line">        OutSeQueue(&amp;Q, &amp;x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">            <span class="comment">//未实现非其他</span></span><br><span class="line">            <span class="comment">//直达</span></span><br><span class="line">            <span class="keyword">if</span> (!visited[i] &amp;&amp; G-&gt;way[x][i] != INFINITY &amp;&amp; i == <span class="built_in">end</span>) &#123;</span><br><span class="line">                visited[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s "</span>, G-&gt;city[i].name);</span><br><span class="line">                InSeQueue(&amp;Q, i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i] &amp;&amp; G-&gt;way[x][i] != INFINITY) &#123;</span><br><span class="line">                visited[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s "</span>, G-&gt;city[i].name);</span><br><span class="line">                InSeQueue(&amp;Q, i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="built_in">end</span>) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//时刻表查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CityTimeTable</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">char</span> city[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">int</span> No = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入要查询的城市:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    No = Locate(G, city);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == No) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= G-&gt;citynum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (G-&gt;way[i][j] != INFINITY) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%s&lt;-------&gt;%s距离:%dkm\n"</span>, G-&gt;city[No].name, G-&gt;city[j].name, G-&gt;way[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加路线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddWay</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">char</span> city1[<span class="number">21</span>], city2[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>, way;</span><br><span class="line">    WAY:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入增加路线的起点城市:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city1);</span><br><span class="line">    start = Locate(G, city1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入增加路线的终点城市:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city2);</span><br><span class="line">    <span class="built_in">end</span> = Locate(G, city2);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(city1, city2) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入错误,起点城市和终点城市相同【逻辑错误】!请重新输入!!\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> WAY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"距离:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;way);</span><br><span class="line">    <span class="keyword">if</span> (G-&gt;way[start][<span class="built_in">end</span>] == INFINITY &amp;&amp; G-&gt;way[<span class="built_in">end</span>][start] == INFINITY) &#123;</span><br><span class="line">        G-&gt;way[start][<span class="built_in">end</span>] = way;</span><br><span class="line">        G-&gt;way[<span class="built_in">end</span>][start] = way;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\t\t\t成功\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"已有铁路!添加失败\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;waynum += <span class="number">1</span>;</span><br><span class="line">    MapFileWrite(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除路线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delway</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> city[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>, way;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入删除路线的起点城市:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    start = Locate(G, city);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入删除路线的终点城市:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city);</span><br><span class="line">    <span class="built_in">end</span> = Locate(G, city);</span><br><span class="line">    <span class="keyword">if</span> (G-&gt;way[start][<span class="built_in">end</span>] != INFINITY &amp;&amp; G-&gt;way[<span class="built_in">end</span>][start] != INFINITY) &#123;</span><br><span class="line">        G-&gt;way[start][<span class="built_in">end</span>] = INFINITY;</span><br><span class="line">        G-&gt;way[<span class="built_in">end</span>][start] = INFINITY;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\t\t\t成功\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"没有铁路!删除失败\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;waynum -= <span class="number">1</span>;</span><br><span class="line">    MapFileWrite(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> dist[], <span class="keyword">int</span> path[][MAXVEX])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mindist, i, j, k, t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; G-&gt;citynum; i++) &#123;</span><br><span class="line">        dist[i] = G-&gt;way[start][i];</span><br><span class="line">        <span class="keyword">if</span> (G-&gt;way[start][i] != INFINITY) &#123;</span><br><span class="line">            path[i][<span class="number">1</span>] = start;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    path[start][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">        mindist = INFINITY;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= G-&gt;citynum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!path[j][<span class="number">0</span>] &amp;&amp; dist[j] &lt; mindist) &#123;</span><br><span class="line">                k = j;</span><br><span class="line">                mindist = dist[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mindist == INFINITY) <span class="keyword">return</span>;</span><br><span class="line">        path[k][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= G-&gt;citynum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!path[j][<span class="number">0</span>] &amp;&amp; G-&gt;way[k][j] &lt; INFINITY &amp;&amp; dist[k] + G-&gt;way[k][j] &lt; dist[j]) &#123;</span><br><span class="line">                dist[j] = dist[k] + G-&gt;way[k][j];</span><br><span class="line">                t = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (path[k][t] != <span class="number">0</span>) &#123;</span><br><span class="line">                    path[j][t] = path[k][t];</span><br><span class="line">                    t++;</span><br><span class="line">                    path[j][k] = k;</span><br><span class="line">                    path[j][t + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="built_in">end</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s---&gt;%s最短路线为从%s"</span>, G-&gt;city[start].name, G-&gt;city[<span class="built_in">end</span>].name, G-&gt;city[start].name);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">2</span>; path[i][j] != <span class="number">0</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"--&gt;%s"</span>, G-&gt;city[path[i][j]].name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--&gt;%s,距离为%d km\n"</span>, G-&gt;city[<span class="built_in">end</span>].name, dist[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortWay</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    MapFileRead(G);</span><br><span class="line">    <span class="keyword">char</span> city1[<span class="number">21</span>], city2[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>;</span><br><span class="line">    <span class="keyword">int</span> dist[MAXVEX], path[MAXVEX][MAXVEX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入起点城市:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city1);</span><br><span class="line">    start = Locate(G, city1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入终点城市:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, city2);</span><br><span class="line">    <span class="built_in">end</span> = Locate(G, city2);</span><br><span class="line">    Dijkstra(G, start, <span class="built_in">end</span>, dist, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MapFileWrite</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(<span class="string">"map.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The file can not be opened.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The file now be opened.\n"</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"%5d%5d"</span>, G-&gt;citynum, G-&gt;waynum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(fp, <span class="string">"%10s"</span>, G-&gt;city[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= G-&gt;citynum; j++) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(fp, <span class="string">"%10d"</span>, G-&gt;way[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fclose(fp) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"File can not be closed.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"File is now closed.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MapFileRead</span><span class="params">(AdjMatrix *G)</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(<span class="string">"map.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The file can not be opened.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fscanf</span>(fp, <span class="string">"%5d%5d"</span>, &amp;G-&gt;citynum, &amp;G-&gt;waynum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">            <span class="built_in">fscanf</span>(fp, <span class="string">"%10s"</span>, G-&gt;city[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;citynum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= G-&gt;citynum; j++) &#123;</span><br><span class="line">                <span class="built_in">fscanf</span>(fp, <span class="string">"%10d"</span>, &amp;G-&gt;way[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fclose(fp) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"File can not be closed.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"File is now closed.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> RootName[] = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">char</span> PassWord[] = <span class="string">"admin"</span>;</span><br><span class="line">    <span class="keyword">char</span> username[<span class="number">10</span>], passwd[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*****************登录系统*******************\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\t\t请输入用户名\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, username);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(username, RootName) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\t\t请输入密码\n"</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>, passwd);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(PassWord, passwd) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"********************登录成功******************\n"</span>);</span><br><span class="line">                    <span class="keyword">return</span> True;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"*******************登录失败*******************\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> False;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"*****************账号错误********************\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> False;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ok"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SlowList <span class="title">CreatList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SlowList H = (Slow *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Slow));</span><br><span class="line">    H-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="global-h"><a href="#global-h" class="headerlink" title="global.h"></a>global.h</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by dingchunhui on 2020/12/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> C_DEMO_GLOBAL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C_DEMO_GLOBAL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAXVEX 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  INFINITY 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> True 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> False 0;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> visited[MAXVEX];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> elem[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> front;<span class="comment">//队头指针</span></span><br><span class="line">    <span class="keyword">int</span> rear;<span class="comment">//队尾指针</span></span><br><span class="line">&#125; CSeQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">21</span>];</span><br><span class="line">&#125; City;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> way[MAXVEX][MAXVEX];</span><br><span class="line">    City city[MAXVEX];<span class="comment">//城市信息</span></span><br><span class="line">    <span class="keyword">int</span> citynum;<span class="comment">//城市个数</span></span><br><span class="line">    <span class="keyword">int</span> waynum;<span class="comment">//铁路个数</span></span><br><span class="line">&#125; AdjMatrix;<span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SlowFlag</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> slow;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SlowFlag</span> *<span class="title">Next</span>;</span></span><br><span class="line">&#125;Slow, *SlowList;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//C_DEMO_GLOBAL_H</span></span></span><br></pre></td></tr></table></figure>

<h2 id="global-c"><a href="#global-c" class="headerlink" title="global.c"></a>global.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by dingchunhui on 2020/12/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visited[MAXVEX];</span><br></pre></td></tr></table></figure>

<h2 id="menu-h"><a href="#menu-h" class="headerlink" title="menu.h"></a>menu.h</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by dingchunhui on 2020/12/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> C_DEMO_MENU_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C_DEMO_MENU_H</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CustomerMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RootMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//C_DEMO_MENU_H</span></span></span><br></pre></td></tr></table></figure>

<h2 id="menu-c"><a href="#menu-c" class="headerlink" title="menu.c"></a>menu.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by dingchunhui on 2020/12/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"menu.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MainChoose;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"***********************城市交通图**********************\n"</span>);</span><br><span class="line">    MAINFALG:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t\t\t1.管理员登录\n\t\t\t2.旅客查询\n\t\t\t3.退出\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;MainChoose);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">    <span class="keyword">if</span> (MainChoose == <span class="number">1</span>) &#123;</span><br><span class="line">        RootMenu();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainChoose == <span class="number">2</span>) &#123;</span><br><span class="line">        CustomerMenu();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MainChoose == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">goto</span> MAINFALG;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RootMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sure, RootChoose, citychoose, waychoose;</span><br><span class="line">    AdjMatrix G;</span><br><span class="line">    sure = Login();</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">    <span class="keyword">if</span> (sure) &#123;</span><br><span class="line">        RootFlag:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"**************************信息修改*******************************\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\t\t\t1.交通图初始化\n\t\t\t2.城市信息修改\n\t\t\t3.路线信息修改\n\t\t\t4.信息查询\n\t\t\t5.退出\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;RootChoose);</span><br><span class="line">        system(<span class="string">"cls"</span>);</span><br><span class="line">        <span class="keyword">if</span> (RootChoose == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"*******************************************初始化*************************************\n\t\t\t"</span>);</span><br><span class="line">            Creat(&amp;G);</span><br><span class="line">            <span class="keyword">goto</span> RootFlag;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (RootChoose == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"**********************城市信息修改**************************\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\t\t\t1.添加\n\t\t\t2.删除\n"</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;citychoose);</span><br><span class="line">            system(<span class="string">"cls"</span>);</span><br><span class="line">            <span class="keyword">if</span> (citychoose == <span class="number">1</span>) &#123;</span><br><span class="line">                CityAdd(&amp;G);</span><br><span class="line">                <span class="keyword">goto</span> RootFlag;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (citychoose == <span class="number">2</span>) &#123;</span><br><span class="line">                CityDel(&amp;G);</span><br><span class="line">                <span class="keyword">goto</span> RootFlag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (RootChoose == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"****************************路线修改*****************************\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\t\t\t1.增加路线\n\t\t\t2.删除路线\n\t\t\t3.返回上一级菜单\n\t\t\t4.退出\n"</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;waychoose);</span><br><span class="line">            system(<span class="string">"cls"</span>);</span><br><span class="line">            <span class="keyword">if</span> (waychoose == <span class="number">1</span>) &#123;</span><br><span class="line">                AddWay(&amp;G);</span><br><span class="line">                <span class="keyword">goto</span> RootFlag;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (waychoose == <span class="number">2</span>) &#123;</span><br><span class="line">                Delway(&amp;G);</span><br><span class="line">                <span class="keyword">goto</span> RootFlag;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (waychoose == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">goto</span> RootFlag;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (waychoose == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">goto</span> RootFlag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (RootChoose == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"***************************交通信息************************************\n"</span>);</span><br><span class="line">            CityTimeTable(&amp;G);</span><br><span class="line">            <span class="keyword">goto</span> RootFlag;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (RootChoose == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">goto</span> RootFlag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CustomerMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> CustChoose, WayChoose;</span><br><span class="line">    AdjMatrix G;</span><br><span class="line">    CustomerFlag:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*********************************路线查询*********************************\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t\t\t1.路线决策\n\t\t\t2.交通图信息\n\t\t\t3.退出\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;CustChoose);</span><br><span class="line">    system(<span class="string">"cls"</span>);</span><br><span class="line">    <span class="keyword">if</span> (CustChoose == <span class="number">1</span>) &#123;</span><br><span class="line">        WayFlag:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"***************************路线决策选择************************************\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\t\t\t请选择决策:\t\t\t\n\t1.最快到达\t\t\t\n\t2.最省费用到达\t\t\t\n\t3.最少中转路线数\t\t\t\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;WayChoose);</span><br><span class="line">        <span class="keyword">if</span> (WayChoose == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"************最快到达***********\n"</span>);</span><br><span class="line">            ShortWay(&amp;G);</span><br><span class="line">            <span class="keyword">goto</span> WayFlag;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (WayChoose == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"************最省费用到达***********\n"</span>);</span><br><span class="line">            ShortWay(&amp;G);</span><br><span class="line">            <span class="keyword">goto</span> WayFlag;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (WayChoose == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"************最少中转路线数***********\n"</span>);</span><br><span class="line">            Seek(&amp;G);</span><br><span class="line">            <span class="keyword">goto</span> WayFlag;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"输入错误！请重新输入！！\n"</span>);</span><br><span class="line">            <span class="keyword">goto</span> WayFlag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (CustChoose == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"***************************交通信息************************************\n"</span>);</span><br><span class="line">        CityTimeTable(&amp;G);</span><br><span class="line">        <span class="keyword">goto</span> CustomerFlag;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (CustChoose == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">goto</span> CustomerFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>Prim算法</title>
    <url>/2021/01/03/Prim%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>从连通网络N={v,E}中的某一个顶点v0出发，选择与他关联的具有最小权值的边（u0，v），将其顶点加入生成树的顶点集合U。以后每一步从一个顶点在U中，而另一个不在U的各条边选择权值最小的边（u，v），把它的顶点加入集合U中，这意味着（u，v）也加入生成树的边集合。如此继续下去，直到网络中的所有顶点都加入生成树的顶点集合U中为止。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(AdkMartix *G, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> adjvex;</span><br><span class="line">        <span class="keyword">int</span> lowcost;</span><br><span class="line">    &#125; closedge[MAXVEX];</span><br><span class="line">    <span class="keyword">int</span> m, <span class="built_in">min</span>;</span><br><span class="line">    closedge[start] = <span class="number">0</span>;<span class="comment">//标志顶点u已经加入U生成树集合</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != start) &#123;</span><br><span class="line">            closedge[i].adjvex = start;</span><br><span class="line">            closedge[i].lowcost = G-&gt;arcs[start][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G-&gt;vexnum; i++) &#123;</span><br><span class="line">        <span class="built_in">min</span> = INFINTY;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= G-&gt;vexnum; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (closedge[j] != <span class="number">0</span> &amp;&amp; closedge[j].lowcost &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">                <span class="built_in">min</span> = j;</span><br><span class="line">                <span class="built_in">min</span> = closedge[j].lowcost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        closedge[m].lowcost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= G-&gt;vexnum; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k != m &amp;&amp; G-&gt;arcs[m][k] &lt; closedge[k].lowcost) &#123;</span><br><span class="line">                closedge[i].lowcost = G-&gt;arcs[m][k];</span><br><span class="line">                closedge[k].adjvex = m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
</search>
