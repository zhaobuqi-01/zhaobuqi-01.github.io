<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git学习</title>
    <url>/2020/06/01/git%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure>

<h1 id="设置ssh-key"><a href="#设置ssh-key" class="headerlink" title="设置ssh key"></a>设置ssh key</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your email&quot;</span><br></pre></td></tr></table></figure>

<h1 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h1><p>初始化仓库以后<strong>git</strong> 才可以对目录里的文件进行跟踪</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p><strong>添加文件到仓库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add &lt;filename&gt;  #添加文件到暂存区</span><br><span class="line">git commit -m &quot;提交描述&quot; #将当前暂存区的文件保存到仓库的历史提交中（就像创建了一个快照，在特定的时期可以将仓库李所有文件回复到一个之前的状态）</span><br></pre></td></tr></table></figure>

<h1 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status #显示Git仓库的状态</span><br></pre></td></tr></table></figure>

<p><strong>查看仓库状态</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch hexo</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;hexo&#39;.</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        &quot;source&#x2F;_posts&#x2F;git\345\255\246\344\271\240.md&quot;</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"># 显示未跟踪的文件有 source&#x2F;_posts&#x2F;git\345\255\246\344\271\240.md ,没有加入暂存区的文件也没有提交的文件</span><br></pre></td></tr></table></figure>

<p><strong>查看修改的内容</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gti diff #查看当前工作树和暂存区</span><br><span class="line">git diff HEAD #查看工作树和最新提交的差别</span><br></pre></td></tr></table></figure>

<p><strong>版本回退</strong> </p>
<ul>
<li>查看提交日志</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log #查看提交日志&#x2F;显示从最近到最远的提交日志   [回退历史版本]</span><br><span class="line">git relog [回退未来的版本]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>git log 的参数</strong> </p>
<p>​    – pretty=short   只显示提交信息的第一行</p>
<p>​    -p    显示文件的改动（查看提交带来的改动）</p>
<p><code>git log &lt;filename&gt;</code>     只显示指定的目录，文件的日志</p>
</blockquote>
<ul>
<li>回溯历史版本</li>
</ul>
<p>在Git用<code>HEAD</code> 表示当前版本，也就是最新的提交，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当往上的版本太多时使用<code>HEAD~数字</code>。 </p>
<p><code>git reset</code> </p>
<p>​    –hard</p>
<h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><p><code>git checkout --&lt;filename&gt;</code>     把文件在工作区的修改全部撤销，让文件回到最近一次<code>git commit</code>或<code>git add</code> 时的状态。</p>
<p><code>git reset HEAD &lt;file&gt;</code>      撤销暂存区的修改</p>
<p><code>git reset HEAD</code>    既可以回退版本，也可以把暂存区的修改回退到工作区。</p>
<ol>
<li>想修改工作区里的文件    <code>git checkout --file</code></li>
<li>想修改暂存区里文件   <code>git reset HEAD &lt;flie&gt;</code></li>
<li>想撤销本次提交  <code>git reset^</code></li>
</ol>
<h1 id="文件删除与恢复"><a href="#文件删除与恢复" class="headerlink" title="文件删除与恢复"></a>文件删除与恢复</h1><ul>
<li>从版本库里删除文件    先在目录里删除文件<code>rm &lt;file</code>再在版本库里删除对应的文件<code>git rm</code></li>
<li>从版本库里恢复文件    <code>git checkout --&lt;file&gt;</code></li>
</ul>
<p>无论你删除或恢复一个文件以后进行提交，git都会为你保存一个版本，你都可以通过版本回退来找到自己需要的版本。</p>
<h1 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h1><p><code>git remote add origin git@github.com:用户名/仓库名.git</code></p>
<p>origin可以修改，origin是远程仓库的标识符</p>
<h1 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master #-u参数可以在推送的时候，将origin仓库的master分支设置为本地分支当前分支的upstream（上游）。添加了这个参数，将来在 git pull 的时候可以直接从origin的master分支获取最新的内容而不用添加其他参数。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin &lt;分知名&gt;</span><br></pre></td></tr></table></figure>

<h1 id="获取远程仓库"><a href="#获取远程仓库" class="headerlink" title="获取远程仓库"></a>获取远程仓库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:用户名&#x2F;仓库名.git</span><br><span class="line">#默认处于远程仓库的默认分支下，同时系统会自动将origin设置为该远程仓库的标识符</span><br></pre></td></tr></table></figure>

<h2 id="获取远程仓库的其他分支"><a href="#获取远程仓库的其他分支" class="headerlink" title="获取远程仓库的其他分支"></a>获取远程仓库的其他分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b other origin&#x2F;others</span><br><span class="line"># -b参数后是本地新建分支的名称，新建分支后面的是获取来源的分支名称</span><br><span class="line">git fetch origin other:others</span><br><span class="line"># origin后面的分别是本地分支和远程仓库分支</span><br></pre></td></tr></table></figure>

<p><strong>注意获取其他分支需要与远程仓库相关联</strong> </p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>git学习2</title>
    <url>/2020/09/07/git%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<h1 id="git命令的补充"><a href="#git命令的补充" class="headerlink" title="git命令的补充"></a>git命令的补充</h1><ol>
<li>git add . <strong>提交全部文件到暂存区</strong></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>入门</title>
    <url>/2020/09/08/go%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//main 包比较特殊。它定义了一个独立可执行的程序，而不是一个库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//一个函数的声明由 func 关键字、函数名、参数列表、返回值列表以及包含在大括号里的函数体组成</span></span><br><span class="line">    fmt.Println(<span class="string">"hello,世界"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>go run test.go</code></p>
<p>Hello,world.你好，世界！</p>
</blockquote>
<p>Go语言的代码通过包（package）组织，包类似于其他语言里的库（libraies）或者模块（modules）.</p>
<p>一个包位于单个目录下的一个或多个.go源代码文件组成，目录定义报的作用。</p>
<p><strong>每个源代码都以一条<code>package</code> 声明语句开始</strong> ，这个例子里就是<code>package main</code> ,<strong>表示该文件属于哪个包</strong> ，紧跟着一系列导入（import)的包，之后是存储在这个文件里的程序语句。</p>
<p><strong><em>必须告诉编译器源文件需要哪些包，这就是跟随在<code>package</code> 声明后面的<code>import</code> 声明扮演的角色。</em></strong> </p>
<p><em>必须恰当需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。</em></p>
<p><strong><code>import</code> 声明必须跟在文件的<code>package</code> 声明之后。</strong>随后，则是组成程序的函数，变量，常量，类型的声明语句。这些内容的声明顺序并不重要。</p>
<p><strong>Go语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句</strong> </p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>hexo常用指令</title>
    <url>/2020/09/07/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>*<em>1.hexo n *</em> 新建一篇文章</p>
<p>*<em>2. hexo init *</em> 初始化一个网站</p>
<p>*<em>3. hexo g *</em> 生成静态文件，在发布到GitHub前需要先生成静态文件</p>
<p>*<em>4. hexo s *</em> 启动服务器，可以在本地访问，访问地址为<code>http://localhost:4000/</code></p>
<p>*<em>5. hexo d *</em> 部署网站【发布到GitHub】 </p>
]]></content>
      <categories>
        <category>hexo的使用</category>
      </categories>
  </entry>
  <entry>
    <title>linux_ls</title>
    <url>/2020/06/03/linux-ls/</url>
    <content><![CDATA[<h1 id="ls与pwd"><a href="#ls与pwd" class="headerlink" title="ls与pwd"></a>ls与pwd</h1><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p><strong>pwd</strong>     –显示当前所在的目录</p>
<p>演示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~$ pwd</span><br><span class="line">/home/zhaobuqi</span><br></pre></td></tr></table></figure>

<blockquote>
<p>名称<br>       pwd - 显示出当前/活动目录的名称</p>
<p>概述<br>       pwd [选项]…</p>
<p>描述<br>       输出当前工作目录的完整名称。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-L, --logical</span><br><span class="line">       使用环境变量中的 PWD，即使其中包含符号链接</span><br><span class="line"></span><br><span class="line">-P, --physical</span><br><span class="line">       避免所有符号链接</span><br><span class="line"></span><br><span class="line">--help 显示此帮助信息并退出</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line">       显示版本信息并退出</span><br><span class="line"></span><br><span class="line">如果没有指定任何选项，默认使用 -P。</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><strong>ls</strong>     查看指定目录的内容</p>
<blockquote>
<p>ls [选项] [文件名…]</p>
</blockquote>
<p><strong>常用ls的参数</strong> </p>
<ul>
<li><strong>-l</strong> </li>
</ul>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-l, --format=long, --format=verbose</span><br><span class="line">              除每个文件名外，增加显示文件类型、权限、硬链接数、所  有者名、组</span><br><span class="line">              名、大小（  byte  ）、及时间信息（如未指明是  其它时间即指修改时</span><br><span class="line">              间）。对于6个月以上的文件或超出未来 1 小时的文件，时间信息中的时</span><br><span class="line">              分将被年代取代。</span><br></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~$ ls -l</span><br><span class="line">总用量 76</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 6月   2 20:48  公共的</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 5月  30 18:52  模板</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 6月   2 20:48  视频</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 5月  31 21:45  图片</span><br><span class="line">drwxr-xr-x 4 zhaobuqi zhaobuqi  4096 5月  29 13:29  文档</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 6月   2 21:07  下载</span><br><span class="line">drwxr-xr-x 3 zhaobuqi zhaobuqi  4096 5月  29 12:54  音乐</span><br><span class="line">drwxr-xr-x 2 zhaobuqi zhaobuqi  4096 5月  29 13:18  桌面</span><br><span class="line">drwxrwxr-x 5 zhaobuqi zhaobuqi  4096 5月  29 13:29  baidunetdisk</span><br><span class="line">drwxrwxr-x 3 zhaobuqi zhaobuqi  4096 6月   3 15:03  go</span><br><span class="line">drwxrwxr-x 3 zhaobuqi zhaobuqi  4096 6月   3 15:02  go_code</span><br><span class="line">-rw-r--r-- 1 zhaobuqi zhaobuqi 10013 6月   3 15:40 &#39;- list directory contents&#39;</span><br><span class="line">drwxrwxr-x 4 zhaobuqi zhaobuqi  4096 5月  30 17:58  my_app</span><br><span class="line">drwxr-xr-x 3 zhaobuqi zhaobuqi  4096 5月  28 19:46  snap</span><br><span class="line">-rw-r--r-- 1 zhaobuqi zhaobuqi 10013 6月   3 15:40 &#39;t  information  about  the FILEs (the current directory by default).</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>-a</strong> </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a, --all</span><br><span class="line">             列出目录中所有文件，包括以“.”开头的文件。</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zhaobuqi@zhaobuqi:~$ ls -a</span><br><span class="line"> .</span><br><span class="line"> ..</span><br><span class="line"> 公共的</span><br><span class="line"> 模板</span><br><span class="line"> 视频</span><br><span class="line"> 图片</span><br><span class="line"> 文档</span><br><span class="line"> 下载</span><br><span class="line"> 音乐</span><br><span class="line"> 桌面</span><br><span class="line"> .accelerate</span><br><span class="line"> baidunetdisk</span><br><span class="line"> .bash_history</span><br><span class="line"> .bash_logout</span><br><span class="line"> .bashrc</span><br><span class="line"> .cache</span><br><span class="line"> .config</span><br><span class="line"> .dbus</span><br><span class="line"> .deepinwine</span><br><span class="line"> .designer</span><br><span class="line"> .gitconfig</span><br><span class="line"> .gnupg</span><br><span class="line"> go</span><br><span class="line"> go_code</span><br><span class="line"> .kingsoft</span><br><span class="line">'- list directory contents'</span><br><span class="line"> .local</span><br><span class="line"> .mono</span><br><span class="line"> .mozilla</span><br><span class="line"> my_app</span><br><span class="line"> .node_repl_history</span><br><span class="line"> .npm</span><br><span class="line"> .npmrc</span><br><span class="line"> .nv</span><br><span class="line"> .pam_environment</span><br><span class="line"> .pki</span><br><span class="line"> .presage</span><br><span class="line"> .profile</span><br><span class="line"> snap</span><br><span class="line"> .ssh</span><br><span class="line"> .sudo_as_admin_successful</span><br><span class="line">'t  information  about  the FILEs (the current directory by default).'</span><br><span class="line"> .viminfo</span><br><span class="line"> .vscode</span><br><span class="line"> .wine</span><br><span class="line"> .xinputrc</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux-打包与解压缩</title>
    <url>/2020/06/03/linux-%E6%89%93%E5%8C%85%E4%B8%8E%E8%A7%A3%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h1 id="打包与解压缩"><a href="#打包与解压缩" class="headerlink" title="打包与解压缩"></a>打包与解压缩</h1><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar czf /tmp/etc-backup.tar.gz /etc/</span><br></pre></td></tr></table></figure>

<h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xzf /tmp/etc-backup.tar.gz -C /etc/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux_帮助命令</title>
    <url>/2020/06/03/linux-%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h1><ul>
<li>man</li>
<li>help</li>
<li>info</li>
</ul>
<p>命令用法演示</p>
<p><code>man ls</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME</span><br><span class="line">       ls - list directory contents</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ls [OPTION]... [FILE]...</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       List  information  about  the FILEs (the current directory by default).</span><br><span class="line">       Sort entries alphabetically if none of -cftuvSUX nor --sort  is  speci‐</span><br><span class="line">       fied.</span><br><span class="line"></span><br><span class="line">       Mandatory  arguments  to  long  options are mandatory for short options</span><br><span class="line">       too.</span><br><span class="line"></span><br><span class="line">       -a, --all</span><br><span class="line">              do not ignore entries starting with .</span><br><span class="line"></span><br><span class="line">       -A, --almost-all</span><br><span class="line">              do not list implied . and ..</span><br><span class="line"> 省略......</span><br></pre></td></tr></table></figure>

<p><code>help help</code>或 <code>help --help</code></p>
<blockquote>
<p>help [-dms] [模式 …]<br>   显示内建命令的相关信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">显示内建命令的简略信息。如果指定了 PATTERN 模式，</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">给出所有匹配 PATTERN 模式的命令的详细帮助，否则打</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">印一个帮助主题列表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">选项：</span></span><br><span class="line"> -d	输出每个主题的简短描述</span><br><span class="line"> -m	以伪 man 手册的格式显示使用方法</span><br><span class="line"> -s	为每一个匹配 PATTERN 模式的主题仅显示一个用法</span><br><span class="line">简介</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">参数：</span></span><br><span class="line"> PATTERN	指定帮助主题的模式</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">退出状态：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">返回成功，除非未找到 PATTERN 模式没有找到或者使用了无效选项。</span></span><br></pre></td></tr></table></figure>

</blockquote>
<p><code>info ls</code></p>
<blockquote>
<p>ext: dir invocation,  Up: Directory listing</p>
<h1 id="10-1-‘ls’-List-directory-contents"><a href="#10-1-‘ls’-List-directory-contents" class="headerlink" title="10.1 ‘ls’: List directory contents"></a>10.1 ‘ls’: List directory contents</h1><p>The ‘ls’ program lists information about files (of any type, including<br>directories).  Options and file arguments can be intermixed arbitrarily,<br>as usual.</p>
<p>   For non-option command-line arguments that are directories, by<br>default ‘ls’ lists the contents of directories, not recursively, and<br>omitting files with names beginning with ‘.’.  For other non-option<br>arguments, by default ‘ls’ lists just the file name.  If no non-option<br>argument is specified, ‘ls’ operates on the current directory, acting as<br>if it had been invoked with a single argument of ‘.’.</p>
<p>   By default, the output is sorted alphabetically, according to the<br>locale settings in effect.(1)  If standard output is a terminal, the<br>output is in columns (sorted vertically) and control characters are<br>output as question marks; otherwise, the output is listed one per line<br>and control characters are output as-is.</p>
<p>省略…</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux_目录</title>
    <url>/2020/06/03/linux-%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="常见目录"><a href="#常见目录" class="headerlink" title="常见目录"></a>常见目录</h1><ul>
<li>/  <strong>根目录</strong></li>
<li>/root  <strong>root的家目录</strong> </li>
<li>/home/username  <strong>普通用户的家目录</strong> </li>
<li>/etc  <strong>配置目录</strong> </li>
<li>/bin  <strong>命令目录</strong> </li>
<li>/sbin  <strong>管理目录</strong> </li>
<li>/usr/bin/usr/sbin  <strong>系统预装的其他命令</strong> </li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu下ssh的使用</title>
    <url>/2020/06/02/ubuntu%E4%B8%8Bssh%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh</span><br></pre></td></tr></table></figure>
<h1 id="ssh登录远程服务器"><a href="#ssh登录远程服务器" class="headerlink" title="ssh登录远程服务器"></a>ssh登录远程服务器</h1><blockquote>
<p>ssh -l username  ip</p>
</blockquote>
<blockquote>
<p>ssh username@ip</p>
</blockquote>
<p>输入<strong>exit</strong> 退出连接</p>
<h1 id="ssh上传文件"><a href="#ssh上传文件" class="headerlink" title="ssh上传文件"></a>ssh上传文件</h1><p><code>scp &lt;file&gt; username@ip:dir</code></p>
<h1 id="ssh下载文件"><a href="#ssh下载文件" class="headerlink" title="ssh下载文件"></a>ssh下载文件</h1><p><code>scp usernmae@ip:file dir</code></p>
<h1 id="生成ssh密钥"><a href="#生成ssh密钥" class="headerlink" title="生成ssh密钥"></a>生成ssh密钥</h1><p><code>ssh-keygen</code></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>ubutun安装qq和微信</title>
    <url>/2020/09/06/ubuntu%E5%AE%89%E8%A3%85qq%E5%92%8C%E5%BE%AE%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="1-安装deepin"><a href="#1-安装deepin" class="headerlink" title="1.安装deepin"></a>1.安装deepin</h2><p><strong>1.使用git将deepin克隆到本地</strong></p>
<blockquote>
<p>git  clone  <a href="https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu" target="_blank" rel="noopener">https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu</a></p>
</blockquote>
<p><strong>2.进入克隆到本地的deepin文件夹</strong></p>
<blockquote>
<p>cd  deepin-wine-for-ubuntu</p>
</blockquote>
<p><strong>3.安装</strong> </p>
<blockquote>
<p>./install.sh</p>
</blockquote>
<h2 id="2-安装qq-微信"><a href="#2-安装qq-微信" class="headerlink" title="2.安装qq,微信"></a>2.安装qq,微信</h2><blockquote>
<p>wget -qO- <a href="https://deepin-wine.i-m.dev/setup.sh" target="_blank" rel="noopener">https://deepin-wine.i-m.dev/setup.sh</a> | sudo sh</p>
<p><code>#安装qq</code></p>
<p>sudo apt-get install deepin.com.wechat</p>
<p><code>#安装微信</code> </p>
<p>sudo apt-get install deepin.com.qq.im</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装百度输入法</title>
    <url>/2020/06/02/ubuntu%E5%AE%89%E8%A3%85%E7%99%BE%E5%BA%A6%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<h1 id="解决依赖"><a href="#解决依赖" class="headerlink" title="解决依赖"></a>解决依赖</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通过命令行安装 aptitude</span><br><span class="line">sudo apt-get install aptitude -y</span><br></pre></td></tr></table></figure>
<p>使用aptitude解决安装依赖的问题</p>
<h1 id="安装fcitx"><a href="#安装fcitx" class="headerlink" title="安装fcitx"></a>安装fcitx</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通过命令行利用 aptitude 安装 fcitx 和 qt 等</span><br><span class="line">sudo aptitude install fcitx-bin fcitx-table fcitx-config-gtk fcitx-config-gtk2 fcitx-frontend-all</span><br></pre></td></tr></table></figure>

<h1 id="安装qt5"><a href="#安装qt5" class="headerlink" title="安装qt5"></a>安装qt5</h1><p><strong>注意：不安装qt5,百度输入法无法正常使用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo aptitude install qt5-default qtcreator qml-module-qtquick-controls2</span><br></pre></td></tr></table></figure>

<h1 id="安装百度输入法"><a href="#安装百度输入法" class="headerlink" title="安装百度输入法"></a>安装百度输入法</h1><p>到官网下载百度输入法的压宿包，然后解压，在解压的目录执行以下命令</p>
<p><code>sudo dpkg –i fcitx-baidupinyin.deb</code></p>
<p><strong>注意安装完重启即可，重启以后按照提示进行</strong></p>
<p><a href="https://srf.baidu.com/site/guanwang_linux/index.html" target="_blank" rel="noopener">百度输入法下载</a></p>
<h1 id="卸载百度输入法"><a href="#卸载百度输入法" class="headerlink" title="卸载百度输入法"></a>卸载百度输入法</h1><p><code>sudo dpkg --purge remove fcitx-baidupinyin:amd64</code> </p>
]]></content>
  </entry>
  <entry>
    <title>ubuntu安装typora</title>
    <url>/2020/05/31/ubuntu%E5%AE%89%E8%A3%85typora/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># or run:</span><br><span class="line"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class="line">wget -qO - https:&#x2F;&#x2F;typora.io&#x2F;linux&#x2F;public-key.asc | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"># add Typora&#39;s repository</span><br><span class="line">sudo add-apt-repository &#39;deb https:&#x2F;&#x2F;typora.io&#x2F;linux .&#x2F;&#39;</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># install typora</span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在ubutun20.04下搭建hexo环境</title>
    <url>/2020/05/28/ubuntu%E6%90%AD%E5%BB%BAhexo/</url>
    <content><![CDATA[<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p><code>sudo apt install nodejs</code></p>
<h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><p><code>sudo apt install npm</code></p>
<h2 id="改用taobao的npm源"><a href="#改用taobao的npm源" class="headerlink" title="改用taobao的npm源"></a>改用taobao的npm源</h2><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code> </p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><code>cnpm install hexo-cli -g</code>  #-g 表示全局安装</p>
<p><strong>注意：必须在root模式下安装</strong> </p>
]]></content>
      <categories>
        <category>hexo的使用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>npm</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>开始学习c++</title>
    <url>/2020/08/03/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0C++/</url>
    <content><![CDATA[<h1 id="开始学习c"><a href="#开始学习c" class="headerlink" title="开始学习c++"></a>开始学习c++</h1><p>注释使用//,C++对大小写敏感，也就是说区分大写字符和小写字符<br>注意在linux中c++的文件扩展名为cxx，windows中文件扩展名为cpp</p>
<h2 id="c-的输入与输出"><a href="#c-的输入与输出" class="headerlink" title="c++的输入与输出"></a>c++的输入与输出</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    statements;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这几行表明有一个名为main的函数，并描述了该函数的行为。</p>
<p>这几行代码构成了函数定义(function definition)。</p>
<blockquote>
<p>函数定义由两部分组成：函数头，函数体。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span><span class="comment">//第一行 int mian() 叫函数头</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">   statements;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;<span class="comment">//花括号(&#123;和&#125;)中包括的部分叫函数体。</span></span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>哈哈</title>
    <url>/2020/06/12/%E5%93%88%E5%93%88/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>系统的备份与还原</title>
    <url>/2020/06/03/%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar cvpzf centos7.tgz --exclude=/centos7.tgz --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=/media /</span><br></pre></td></tr></table></figure>

<h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvpfz centos7.tgz -C /</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>本地分支推送到远程分支</title>
    <url>/2020/05/28/%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</url>
    <content><![CDATA[<h2 id="1-有远程分支remote-branch-有本地分支local-branch-本地分支与远程分支关联-已经切换到本地分支"><a href="#1-有远程分支remote-branch-有本地分支local-branch-本地分支与远程分支关联-已经切换到本地分支" class="headerlink" title="1.有远程分支remote_branch,有本地分支local_branch,本地分支与远程分支关联,已经切换到本地分支"></a>1.有远程分支remote_branch,有本地分支local_branch,本地分支与远程分支关联,已经切换到本地分支</h2><blockquote>
<p>git push</p>
</blockquote>
<h2 id="2-有远程分支remote-branch-有本地分支local-branch-本地分支与远程分支不关联-已经切换到本地分支"><a href="#2-有远程分支remote-branch-有本地分支local-branch-本地分支与远程分支不关联-已经切换到本地分支" class="headerlink" title="2.有远程分支remote_branch,有本地分支local_branch,本地分支与远程分支不关联,已经切换到本地分支"></a>2.有远程分支remote_branch,有本地分支local_branch,本地分支与远程分支不关联,已经切换到本地分支</h2><blockquote>
<p>git push -u origin/remote_branch</p>
</blockquote>
<h2 id="3-没有远程分支remote-branch-有本地分支local-branch-已经切换到本地分支"><a href="#3-没有远程分支remote-branch-有本地分支local-branch-已经切换到本地分支" class="headerlink" title="3.没有远程分支remote_branch,有本地分支local_branch,已经切换到本地分支"></a>3.没有远程分支remote_branch,有本地分支local_branch,已经切换到本地分支</h2><blockquote>
<p>git push origin local_branch :remote_branch</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git push</tag>
      </tags>
  </entry>
</search>
